<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<l7:Bundle xmlns:l7="http://ns.l7tech.com/2010/04/gateway-management">
    <l7:References>
        <l7:Item>
            <l7:Name>JWK Grok</l7:Name>
            <l7:Id>6ee2107e4cfec877a60af21e920d422b</l7:Id>
            <l7:Type>FOLDER</l7:Type>
            <l7:TimeStamp>2021-11-01T17:52:36.373-07:00</l7:TimeStamp>
            <l7:Resource>
                <l7:Folder folderId="0000000000000000ffffffffffffec76" id="6ee2107e4cfec877a60af21e920d422b" version="0">
                    <l7:Name>JWK Grok</l7:Name>
                </l7:Folder>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>sender</l7:Name>
            <l7:Id>00000000000000000000000000000002:sender</l7:Id>
            <l7:Type>SSG_KEY_ENTRY</l7:Type>
            <l7:TimeStamp>2021-11-01T17:52:36.675-07:00</l7:TimeStamp>
            <l7:Resource>
                <l7:PrivateKey alias="sender" id="00000000000000000000000000000002:sender" keystoreId="00000000000000000000000000000002">
                    <l7:CertificateChain>
                        <l7:CertificateData>
                            <l7:IssuerName>CN%3Dsender</l7:IssuerName>
                            <l7:SerialNumber>184064491591585062147762642923616154459714088605</l7:SerialNumber>
                            <l7:SubjectName>CN%3Dsender</l7:SubjectName>
                            <l7:Encoded>MIIEqTCCApECFCA9vL0h2KBBv1aUhhxE7Xw20+6dMA0GCSqGSIb3DQEBCwUAMBExDzANBgNVBAMMBnNlbmRlcjAeFw0yMTExMDEyMjI1NDJaFw0zMTEwMzAyMjI1NDJaMBExDzANBgNVBAMMBnNlbmRlcjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMjWUiu64lwSsS8AEWDG1c4eNjGWqvoI10y2rUFh2xhljdlqzqokjN9LNs53DRcgxKrxSyqwtnEU3oHwe+X9kkgfba+cvCskHCgSxUSwRxYsVNYl+znJvfRH6tgly8ce2fgK9hSZRdeNqKb2QDJo8er9AXJ+qEV/CQNdLLniFpT60uuFEseSmW0nNryPSGJ/zHf2PK5TJB4+fzC6CVsQK0n5ewfKRaATws59f1RGZ5O9Hgo1R/rnQ3dvmX6+fDAfSKmZsXw8CL060/Q4Xu3Vt9bDcJHnqTvix7XUxsyTrRaH0EvIufTDflril/fdO91Csu+LSXCeB47hNgZETFi6gesOhSB3abksbUbsh714KseUtW5nUuBQzcJN8HOQgfJseyWkJyQy5D9mwDoLaezLmPP6Lxv5W7hE3UxMOQ4Sb6KVcNsfElutu6WnopXzKGQHXgpEbVoSN9ng+K8+T4Qm32xJb5eVz1GC/dvyAYavBrKhvU6dgXJIaIqqQR+lP0lQzkfi3lrPSg1out/3dIOfoFBEjHJIC6puygzEttP/5nZwWFBBgEocg2CHRxSZGfgqRZD/G4n1f57QrvAlVpKe6yfzXS5ChehxqoLuU0tv6ldaggkkzNWbfz7SSU/TXnmK1aaj9b/jqkhAAl3CHCHA1DdbVWQ6fnByTXSgxSxTrI7RAgMBAAEwDQYJKoZIhvcNAQELBQADggIBACLOWVuel9jXDNUIqkS/UPwWi+QN5JCgMJNHW7tzxK0SkawHZi52XW9euqHiuMC2eaAQ03h+HZnUWsONmMl5Vfau3/JcMCT3Sbz3PC0E/wHgpOL8tGnTASehTFhD/gi+KVX6yV7Wt7X1XbjDSOnNgyqN4MxoNW1qCPLdLKn7rrdiP0jsTunmFWa+SET/mFG4JwAjR9vzroYlFbmVtKr6/LGRrlCVT8Lq/AdSNOQkDfLAJygVm/tK61F4t4lbPqh3ZbPa7aLCYcuRS5+DU5tD+lFCm5SBkDYbXH2Fd1jS4AlQKoYYoAvc1N1fm3MsYxCf2lmXq5z01yFknsdpdq9PE0JbgQcI8kB74pdxywtAhzt6EOgbcBYqidDHZ7GYxSqBjg7BMLOddyaQ2w77F+MynVQ5JKhtXMx1WGs8N7r9nQqKzHGkLZno54qZk9MJLzPXscLyFhr8IvUpMFRrRIAMjL1IyDFXPwm31h6lsGQqlw+TwO67vMgmJD5Xz8Qefn+FNsB3b0q7yk8J8r8IZ4JaTXG+UCykZNVdsXSoZYfW/QdIvQPkbS/DYZcuPF7De2i/NedvwCmOl8tNw2/WAcHJuiKnRsBuMh58CQr9UPvDDHI8ZtiHmxNUOZPW34T9rUoHBTgVXhT1dTo8ReqxaHRdDDdtMm/k7rM37/qYUt8SMrUh</l7:Encoded>
                        </l7:CertificateData>
                    </l7:CertificateChain>
                    <l7:Properties>
                        <l7:Property key="keyAlgorithm">
                            <l7:StringValue>RSA</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="keyData">
                            <l7:StringValue algorithm="RSA" bundleKey="$L7C2$1bead,W//pjcMyCCGQdrzi75COtH4GXIIxzSv6MBrJkEl7Ieg=$7wTNFNzBW+oZpXHRvlBfYix/yuDHYmuiacN8l5DJQDUzrFEaXMCDDGqgNZNys5jJ4MiWwvTt9ZeImvDHjBhjZ1kgmii7azAPUSHpkFJeXgnfsYITQ0txLHYzJNcF8ZfV">$L7C2$1,3MfFQhlw/da/lEi0r9nipz+8023hwfT6bj1Ol/tYRRM=$fIGpEtG3PgX8iwbIi5IKuZIntWioocxTf1Gj87dIpmiHmGpDSacX3AqlbkoONmwiWCKE4/kuk0P+X7IQALFTAI2QOppVUYujDFxdBwsiB1OHlH/OooMqhO+n5LvWXxfmGG0htjpxC4MPKfTkxnToeJRCxYVlmHw0tAB85VaEZd2/RxnTgWBc4BqzQZ+JdtWoFXhYgyMAdAT++AuspYbylu1yD/XlwummhwL2/SdbfOPlNfLS50knRAyZVKmb4YqajvCT4XI+pZRDEnlt1uMbgyCPI+3ox37+WLw5Mbn5Fd6kizogVjDfyMXo0Xxv7XwNHtjY6EHincmgTxJNnvlzqnPpiZsr1xTxqpThMG2Str98XYzC922GJnsn62+TJWm675ql9r7ZfJygjt1nzo/bk9mc8fl9YE5001R9GRdMlnYAVj5IvmkGfVDogxoBmV2MFh0VRffRJTSrlCk54z6+6u6zGVE4KBj267IUiWi7Tk744kVOb7U9rVgmGIeyMNOviIKpR5aLJFce4XtKHTSedH/TnBYnpX9beH4+giK+xPmRxm8Qnt4uGAJw8lZHOiJtz4bG9WPCh7XYlRdQ2AVsL52nHj5rZeA3q8UzxDXKXhnllaCNJeWXqJlgVPWNgYC0u5yRWyljR3IzUnie3uuFBxkhOBg47Aw5xoe2V4k7HezAAKpFkqyGdc9WaOHe7QAkzKwJQNUC8vDFIkCu1KtbHYsxODOPdQO9Ct2xnx4pb83ruFAk5GBUfeX5xf8aiAc9LkBqmiD/P1ui14VAEqOnYy/zL06d3o3xBCtUDmYoXqUXX++4ZMPe9lKeqgTQnvseN1kGnF0R7VGLABWY9cIeOFbeOSHrZtk38V7lOujuoqs8cescuNiEyGFcjTCfzQvvqXiYtnS/vbX4yPVQCFyjlRB7LmG9To8ssk4aaU42e1qMzQ6p7uAI9MfF6Am4+vDAw2yxKR+kJquijmUYPKXjIpDM+lDngDEbFyQzrWUmTYe2Ji1kDmG4fqS68nEGx3RPVn+ZJ60SSba2FDASExTbS7YlYB7rluYDClgbxsZ2fGzgZ/z11eAZm9z0KWpkjn6eZVMQREayydQo26eF4XZbSPZTUgmd0cPwhN/peDtcMcSq/aK0KQ0SVM63RbmrdSkTS5lajZQVqwsjCjSWvPiYLJH4ozCeB5vfSktov0Vt0d4KmE19zg3AxjpaSFHWXrUTKPaDEdq+SiZS/0AZhxHiqePYOC1nwSQi5E6uiFsu72+amwn9HT9chhhtZi69eX4NpNQ5uKWWGOKt9kkNv5vIoKz8dP3lKzYimBc7ze7KttJP5Ti2WfLkuDMcyARZiyab7qFPKyIec5PdVyf+fG+gdSMZ9h7EhTCh2upyE40/iFDlgCb1Edl6mec9VJRYagxqwMZnvX5EqhfITlQaRBGCF1IqXWnDUCVFn1e7u/1wBLj4ealyZ6BS9rB2L7FDuygpKLSdywDAdXYQ5vAamoEyJNVDtfEah3mqCoXLxDlmjNKdj4349b/vOhaPWi6n13XJzdAvSFwA/PCMLCb+xgMmaICKWuzoWbx04COTNJkYoVzwLYWq1PLjqc1kzCvWp7HoxzTLVE7AY9VcATa4EfPuK/iCFLyYGbTlNiPbDlr1f/zT3JNYeBc4vX40PD4vHbih3uhG0DIzPXBhFHOFUtFSHU5yMEu8Lh41nWZHAqe6wcgYr9/wZshicgwtLmiCz1biDw3Tqyk3/RdRHlbc2xJyFBvBf3cEQi2dWl2Mey90jNxBaynpPVDoHqV1m77SxBiyoe6u6aquYPcLAKPHjuf1TL7xEkjxPg2Wx1MaB2pFOTFmgVyQFBBJyDDVsTqOpYtc/YZgyhF4ypDY1PWF2LFM/Z7crCfbqqCiOOUc7Rj3neDrYIc41X1JNwPPFL8ErdgeZ0h4ysKfRRRsxMVoRHtVYr639/7xCZy8ZWmiN79G61On8FUSSXDH6wcxQ84uCOkcrlaWjA5F4xJ86qF4w8j08ngDGcPhdoCc62lFZjmxZenIzZZduWLKecL2S6OjTBMenf5Xue70bY7IpE0gLFJmCRzda6gTVGiSo2OysA5SQuF8RIPxo8RR4w4ac6b80vvNTx87VsQ6lAyU7WkZpEn02mYkOL1fTBVhf5LUiffmWE9AWEd1mLtI5/ptvR92Loxr+Tbwabq4/laCxVq9eHBoYBeg0IDDohHZY75O+jNWEUotkxZh/ZRqwRS8OLF9qsL03TtgQKCUhFPeMH/whoGgWxvrAyCwwj+/2LdMvHtARPTZE7tS7+2Y6IR/geLZiiALeHUXb8eZOzcv/O0tN8x4MFVWCmQuvDbL8uaxAUvVfXtn1+GQRCyhaOxWeiT8SMFXWK6TioEItZxDMTden3VeGJrXDaUXIgucygQWp4/JQE5AFcUgaQA9F/tcvISPF8SKjqLTjRJyR389ko8qj2RtrUFGlGWRpVKjZYLZNadVO2zHdHMxWT8hNjBoJ7GbRSX1zcS1SHy0gHpvZkNYLTURsX5RgTB/RRT125FI1VWScdyW5aXij6XemtOzcm06zRGOo5jyHBnuoAW2cusWkxlFhgdFkFakUIScknsBaNp3D8LaU3NS7vMcMukMpmnm91WnB2luYEt9iCi5h5DEdi4Wx1H6tSTVYyHuPSj0ZPM9Uc9Kv28kBSTuQR8+V0NGBCUpu3AS0JYY7iIykgYVGa/Y2UI6nLsBktmeItdDlOTwiwYaFscrQled75m/n8dLv3bYXIQXhi8lBC1l2Qn09evVbR8nd6Xtg0/0KbAvuFFCLonsxzxgbMsuB7St6ROYqkN6LjE8LHXmHefrIqObbDkp9kNNyv2vc9VP1kuB0Zy4CqOE8VW6oQLzt1w2UQTNQiXi9PA0mwKDm7iv5tmCg6+O/Du6c527UE7y+Rt/KJieQE3UaaaqG4Xv90NjH5wcvNl/tfVERHbxgJ2KLwYxN24BJ3dJ1bql8dlSgsJM14uMsj5mhjgtmTgnJxPJicQRbOEJ5aq4QolGysdauqU9rx9msQdu0yqbpMmp/rPw1DEABhl0eZMWavbT0T1hmbzZwxIGx677eRu/00wqVaP/NQx0fEz2wMP8xM01FKiWcUF5U2Yd27xoy0/31Nj989YYPPn6kZz2EpNHhx+Pb+IiY3vIdqkV3iNIhTe/IZf13MurZZVZVuzt8s/uEtO52iFqV+3567Ex5BVR1NBm2F+m18+VIAAGRhf6Qp0LhDBWtQcRCkU=</l7:StringValue>
                        </l7:Property>
                    </l7:Properties>
                </l7:PrivateKey>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>SSL</l7:Name>
            <l7:Id>00000000000000000000000000000002:SSL</l7:Id>
            <l7:Type>SSG_KEY_ENTRY</l7:Type>
            <l7:TimeStamp>2021-11-01T17:52:36.684-07:00</l7:TimeStamp>
            <l7:Resource>
                <l7:PrivateKey alias="SSL" id="00000000000000000000000000000002:SSL" keystoreId="00000000000000000000000000000002">
                    <l7:CertificateChain>
                        <l7:CertificateData>
                            <l7:IssuerName>CN%3Dssg100.l7tech.com</l7:IssuerName>
                            <l7:SerialNumber>15824679280161503608</l7:SerialNumber>
                            <l7:SubjectName>CN%3Dssg100.l7tech.com</l7:SubjectName>
                            <l7:Encoded>MIIC/TCCAeWgAwIBAgIJANucjfZqgrl4MA0GCSqGSIb3DQEBDAUAMBwxGjAYBgNVBAMTEXNzZzEwMC5sN3RlY2guY29tMB4XDTIwMDkwNDE2MTczNFoXDTMwMDkwMjE2MTczNFowHDEaMBgGA1UEAxMRc3NnMTAwLmw3dGVjaC5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCcp8VdMknCkMrDT0tYOpv5yXfpumAAitRFRrfqJ+/Y04PqrrcGXSaMSGk1BmOKsdMmudDE4RRjZqfKG0JoGE1IxqpEjZOFOuWk/tDgIltxsnfDapczUEQeecLewYIMqazYSSn9WhxniUznztJ4F92C9Y6tSdalyznsiiMwa36CpP382ssCXtXZWD8DzUFwmZI/N8Xrr+w2uUnNVtyCTOoOFstmgJAIxjOJZyYk44yOMnBIORAmGLrYf5adEp47N1a5zucqE4w9p8VEKZJgY2kHu4DpZI9YpHi9W8iqjqRd2OXAtqHSVjxWSYWCNOUTNswqx9hplYH1M21SHMIsFu2tAgMBAAGjQjBAMB0GA1UdDgQWBBT2CKkV9zf5zlf6UxKfu16f93MjBzAfBgNVHSMEGDAWgBT2CKkV9zf5zlf6UxKfu16f93MjBzANBgkqhkiG9w0BAQwFAAOCAQEAk+aXyW5RYFhlKsn5nqCD+QoroNX+YI+T57ePei0wm58NNt7ATsMuMNYCMi6LsRSSMEbtrGxTHXORprQqjW2+PrfFxvlux77JZRwsu/mlr8zX53Ue7Q4dCxg5hdWdRgBGkc6cv/G/8VABnUghZSszxNWT9QN/kZKWVSI9XJt2nTSrbFqrwBzJ8jGslKLrcskSwjWURtiGmtrw73/XprOAh7RsOaWE0jKaN/yoyFMb1keCD5TgzxjVrHVE1PMtDdeyEqKCV5EcBr5CYArekL/Pit+AfLTLOzLp8xx/BqGgOsuCDgu+toIZX0gs6oJPQW3bKQuqYNK7ffaLfZdZjOiPXg==</l7:Encoded>
                        </l7:CertificateData>
                    </l7:CertificateChain>
                    <l7:Properties>
                        <l7:Property key="keyAlgorithm">
                            <l7:StringValue>RSA</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="keyData">
                            <l7:StringValue algorithm="RSA" bundleKey="$L7C2$1bead,W//pjcMyCCGQdrzi75COtH4GXIIxzSv6MBrJkEl7Ieg=$7wTNFNzBW+oZpXHRvlBfYix/yuDHYmuiacN8l5DJQDUzrFEaXMCDDGqgNZNys5jJ4MiWwvTt9ZeImvDHjBhjZ1kgmii7azAPUSHpkFJeXgnfsYITQ0txLHYzJNcF8ZfV">$L7C2$1,CPIJIw8Md8ML420DlMClBERG1ejqxcVLaQp3kWaIBVI=$4blOjEh+EGZ+50E4v+nFRH2G3sVwUNoZQWTHB9hdlg69oiQA6rHk/F2kJBJSiKGqp7Lvc/yC1N/wYreO6W3DgngmXq2QcRHy4HwbGivdw0o1X2pMda1rurRdslRn5gkYfpzgMX2cbWLUOJelthwZ4wIWnYNxajBFXdmbYR7uK6ynzNd/85g61K76h7qgY3Q7XBBSJsQNo1qpFhbEzVvLIJwXK4TrHn+PQVF4S0kJJp9Up1VnrYrv32sf8GYEFmd4mV9gId4QYPB47s1JmFlqrIV4YLnE2nLwoXaWKPww5sJj+eXTKZo35XhDbZcnoE4Rd/EJmgzNEZ+GKycbT6SSm3U/Pzypp96zY9cNo/6RHCiJa60NeGnboUB3Ilgc2t/ybt7sJ8PqfoXI16108/+vCbZ2tUuKueb37h3zSqTyFnqwazvRV2owzZdygrNCLPUtubYaaeX5PFALqGS2p8Bwutgg5DqoilN/Ibih9SUNsZxVljt3TunhpooZwRkWJTfl/CxsssRKyvqNh/Kx72JfS9wtP03cxVL1wFNbDl4PyqhMArw/HNEEbY0g9DJUKLZNO/C1r6KLuCYdnhscKsXTdN8mAuoUSEoqzybXbNTGBer9PLWLJlLeH59f1aQZT/PEoDX3CxwT5HWg+sRqrqz1rbzuBBJT+h+ka0hfXs+UyU4j5AubK+T8ZnRnDlVafUAdQIO50ZmhrSno9SaS10Vt9tqa22q6oATcXzEeez2k5JJ3XfUN2oZ7dFzM9RoMa5i6PwzFO2VskhgCpRbX1j7FcC3aN2dhIHscr9rFcS9sk50pfLmhykPsuiE3VwR0/Wzzo9PtuOaNqlRp2sgv/tRuw6BjRTfXwhfe/vokiQexE+hrJdTHqJ5oCuaoeWdGr5xhJQnIv9SFt+wGcAtDXfKbYMcQZrNimrTUGSEmrScsNAn4bzquKEmhYwQb6MZvZiFNyOzeVpCApkQWpShVbj0uujDtLVpwvI9GCjoQ58/ECl1CSk2hRsMk+BhQZDp2COYrbEBPM6MSANNfLoAARrfCQVRcx1f8B5z3CTrT7Q9arzIyJTez7T0QDYegQ9Xwj3eTqiAKGyDL8iIkeyiUCE9cpgOSu8Xk9+sDOR9CFdlPCnCed+I9OmjpDtoFRCQXuBbAog+RW7YkrJ7+1HQYQrLuRNv84Lkp1sMTjD8QnnCxOCOlVjeLgUPHj7qSNtBtQjumkDpIpVqhVqFPt0OLOs78wDGQ/Q7UxuMswoY6DURDeTXGmEpWA93Qi8HkjD2k+1GilZisM5jjRR12Ml2MKLxa5ywbIpm8IGtSB/RI8flmnvyJe2FMNtREs1B6elE3qmx7KrR+xi3srz5IqVP3IZNK7ovoMH0LQx1wymEAd134+qqXxbF6Ou4RS73BHtYQz8lF602JiZ8zby1jKWDi9LyVI9+Eva29PIY2K1ocIotVLmwvnydrQ3YYTM9AQ3Qpcg8y4a/5Ju2NhoiZyLdinHnXv98b0qC8nIEdQ8Z76QZZfxZ0ZNzyeHsBiMlrHswBu804T/AB28Oeg3EDlIuqnkH58Bk8F9Fi3HgI0LOFZWvhhEw5uHMk4l0DpAXgtX1kpWBUv8vVCp/jYxE+Y9+5OWRImEFB6xgtJzmyk9qdI/YPVmhbGByc0KXwv5iz3+RSDeO+wlkXde7taXjccEiQqEXCSjJWNJaXDDFEHRvdCFydt0Q=</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="specialPurposes">
                            <l7:StringValue>Default SSL Key</l7:StringValue>
                        </l7:Property>
                    </l7:Properties>
                </l7:PrivateKey>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>JWK Sender</l7:Name>
            <l7:Id>4d23c5abba6cc6e62e4672c65385d211</l7:Id>
            <l7:Type>SERVICE</l7:Type>
            <l7:TimeStamp>2021-11-01T17:52:36.867-07:00</l7:TimeStamp>
            <l7:Resource>
                <l7:Service id="4d23c5abba6cc6e62e4672c65385d211" version="7">
                    <l7:ServiceDetail folderId="6ee2107e4cfec877a60af21e920d422b" id="4d23c5abba6cc6e62e4672c65385d211" version="7">
                        <l7:Name>JWK Sender</l7:Name>
                        <l7:Enabled>true</l7:Enabled>
                        <l7:ServiceMappings>
                            <l7:HttpMapping>
                                <l7:UrlPattern>/jwkSender</l7:UrlPattern>
                                <l7:Verbs>
                                    <l7:Verb>GET</l7:Verb>
                                </l7:Verbs>
                            </l7:HttpMapping>
                        </l7:ServiceMappings>
                        <l7:Properties>
                            <l7:Property key="internal">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                            <l7:Property key="policyRevision">
                                <l7:LongValue>261</l7:LongValue>
                            </l7:Property>
                            <l7:Property key="soap">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                            <l7:Property key="tracingEnabled">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                            <l7:Property key="wssProcessingEnabled">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                        </l7:Properties>
                    </l7:ServiceDetail>
                    <l7:Resources>
                        <l7:ResourceSet tag="policy">
                            <l7:Resource type="policy" version="260">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy"&gt;
    &lt;wsp:All wsp:Usage="Required"&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="********************************************************************************************************************"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Policy to demonstrate JWS using JWK - Sender service"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Create the JWT and sign/encrypt then route to Recipient service for handling"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Pass the test number in the test parameter (e.g. http://&amp;lt;gateway&gt;:8080/jwkSender?test=4)"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests where no JOSE happens"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 1: sig:none, enc:none, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests where no JWE happens"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 2: sig:keystore, enc:none, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 3: sig:jwk, enc:none, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 4: sig:keystore, enc:none, val:certificate, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 5: sig:keystore, enc:none, val:jwk, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 6: sig:jwk, enc:none, val:jwk, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 7: sig:jwk, enc:none, val:certificate, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests where no JWS happens"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 8: sig:none, enc:certificate, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 9: sig:none, enc:jwk, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 10: sig:none, enc:certificate, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 11: sig:none, enc:certificate, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 12: sig:none, enc:jwk, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 13: sig:none, enc:jwk, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests with full sender JOSE, no recipient JOSE"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 14: sig:keystore, enc:certificate, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 15: sig:jwk, enc:certificate, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 16: sig:keystore, enc:jwk, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 17: sig:jwk, enc:jwk, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests with full sender JOSE, recipient only JWE from keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 18: sig:keystore, enc:certificate, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 19: sig:jwk, enc:certificate, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 20: sig:keystore, enc:jwk, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 21: sig:jwk, enc:jwk, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests with full sender JOSE, recipient only JWE from JWK"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 22: sig:keystore, enc:certificate, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 23: sig:jwk, enc:certificate, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 24: sig:keystore, enc:jwk, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 25: sig:jwk, enc:jwk, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests with full JOSE, recipient JWE from keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 26: sig:keystore, enc:certificate, val:certificate, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 27: sig:jwk, enc:certificate, val:jwk, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 28: sig:keystore, enc:jwk, val:certificate, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 29: sig:jwk, enc:jwk, val:jwk, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests with full JOSE, recipient JWE from JWK"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 30: sig:keystore, enc:certificate, val:certificate, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 31: sig:jwk, enc:certificate, val:jwk, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 32: sig:keystore, enc:jwk, val:certificate, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 33: sig:jwk, enc:jwk, val:jwk, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="********************************************************************************************************************"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:AuditAssertion/&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLnRlc3R9"/&gt;
            &lt;L7p:VariableToSet stringValue="test"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:Base64Expression stringValue="ZmFsc2U="/&gt;
            &lt;L7p:VariableToSet stringValue="failed"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:Base64Expression stringValue="JHtyZXF1ZXN0LnVybC5wcm90b2NvbH06Ly8ke3JlcXVlc3QudXJsLmhvc3R9OiR7cmVxdWVzdC51cmwucG9ydH0ke3JlcXVlc3QudXJsLnBhdGh9"/&gt;
            &lt;L7p:VariableToSet stringValue="url"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;wsp:All wsp:Usage="Required"&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="PHJvb3QvPg=="/&gt;
                &lt;L7p:ContentType stringValue="text/xml; charset=utf-8"/&gt;
                &lt;L7p:DataType variableDataType="message"/&gt;
                &lt;L7p:VariableToSet stringValue="dummy.xml"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:ResponseXpathAssertion&gt;
                &lt;L7p:VariablePrefix stringValue="arithmetic"/&gt;
                &lt;L7p:XmlMsgSrc stringValue="dummy.xml"/&gt;
                &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                    &lt;L7p:Expression stringValue="$test + 1"/&gt;
                    &lt;L7p:Namespaces mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="s"/&gt;
                            &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Namespaces&gt;
                    &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                &lt;/L7p:XpathExpression&gt;
            &lt;/L7p:ResponseXpathAssertion&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="JHthcml0aG1ldGljLnJlc3VsdH0="/&gt;
                &lt;L7p:VariableToSet stringValue="nav.next"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:Regex&gt;
                &lt;L7p:AutoTarget booleanValue="false"/&gt;
                &lt;L7p:OtherTargetMessageVariable stringValue="nav.next"/&gt;
                &lt;L7p:Regex stringValue="\.0$"/&gt;
                &lt;L7p:Replace booleanValue="true"/&gt;
                &lt;L7p:Replacement stringValue=""/&gt;
                &lt;L7p:Target target="OTHER"/&gt;
            &lt;/L7p:Regex&gt;
            &lt;L7p:ResponseXpathAssertion&gt;
                &lt;L7p:VariablePrefix stringValue="arithmetic"/&gt;
                &lt;L7p:XmlMsgSrc stringValue="dummy.xml"/&gt;
                &lt;L7p:XpathExpression xpathExpressionValue="included"&gt;
                    &lt;L7p:Expression stringValue="$test - 1"/&gt;
                    &lt;L7p:Namespaces mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="s"/&gt;
                            &lt;L7p:value stringValue="http://schemas.xmlsoap.org/soap/envelope/"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Namespaces&gt;
                    &lt;L7p:XpathVersion xpathVersion="XPATH_1_0"/&gt;
                &lt;/L7p:XpathExpression&gt;
            &lt;/L7p:ResponseXpathAssertion&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="JHthcml0aG1ldGljLnJlc3VsdH0="/&gt;
                &lt;L7p:VariableToSet stringValue="nav.previous"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:Regex&gt;
                &lt;L7p:AutoTarget booleanValue="false"/&gt;
                &lt;L7p:OtherTargetMessageVariable stringValue="nav.previous"/&gt;
                &lt;L7p:Regex stringValue="\.0$"/&gt;
                &lt;L7p:Replace booleanValue="true"/&gt;
                &lt;L7p:Replacement stringValue=""/&gt;
                &lt;L7p:Target target="OTHER"/&gt;
            &lt;/L7p:Regex&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// Calculate previous and next tests per ${test}"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:All&gt;
        &lt;L7p:SetVariable&gt;
            &lt;L7p:Base64Expression stringValue="PGEgaHJlZj0iJHt1cmx9P3Rlc3Q9JHtuYXYucHJldmlvdXN9Ij5UZXN0ICR7bmF2LnByZXZpb3VzfTwvYT4gfCA8YSBocmVmPSIke3VybH0/dGVzdD0ke25hdi5uZXh0fSI+VGVzdCAke25hdi5uZXh0fTwvYT4="/&gt;
            &lt;L7p:VariableToSet stringValue="navigation"/&gt;
        &lt;/L7p:SetVariable&gt;
        &lt;wsp:All wsp:Usage="Required"&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Set a time variable for 5 minutes in the future"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue=""/&gt;
                &lt;L7p:DataType variableDataType="dateTime"/&gt;
                &lt;L7p:DateOffsetExpression stringValue="5"/&gt;
                &lt;L7p:DateOffsetField intValue="12"/&gt;
                &lt;L7p:VariableToSet stringValue="expires"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:UUIDGenerator&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// ${nonce}"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:TargetVariable stringValue="nonce"/&gt;
            &lt;/L7p:UUIDGenerator&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:AssertionComment assertionComment="included"&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Hardcode sub"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:AssertionComment&gt;
                &lt;L7p:Base64Expression stringValue="ew0KICAic3ViIiAgICAgICA6ICJKb2huIERvZSIsDQogICJpc3MiICAgICAgIDogIiR7cmVxdWVzdC51cmwuaG9zdH0iLA0KICAibm9uY2UiICAgICA6ICIke25vbmNlfSIsDQogICJhdXRoX3RpbWUiIDogJHtnYXRld2F5LnRpbWUuc2Vjb25kc30sDQogICJpYXQiICAgICAgIDogJHtnYXRld2F5LnRpbWUuc2Vjb25kc30sDQogICJleHAiICAgICAgIDogJHtleHBpcmVzLnNlY29uZHN9DQp9"/&gt;
                &lt;L7p:VariableToSet stringValue="jwt.payload"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// Create a sample JWT payload for signing"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:All&gt;
        &lt;wsp:All wsp:Usage="Required"&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="ew0KICAia3R5IjogIlJTQSIsDQogICJraWQiOiAic2VuZGVyLmtleSIsDQogICJuIjogInlOWlNLN3JpWEJLeEx3QVJZTWJWemg0Mk1aYXEtZ2pYVExhdFFXSGJHR1dOMldyT3FpU00zMHMyem5jTkZ5REVxdkZMS3JDMmNSVGVnZkI3NWYyU1NCOXRyNXk4S3lRY0tCTEZSTEJIRml4VTFpWDdPY205OUVmcTJDWEx4eDdaLUFyMkZKbEYxNDJvcHZaQU1tang2djBCY242b1JYOEpBMTBzdWVJV2xQclM2NFVTeDVLWmJTYzJ2STlJWW5fTWRfWThybE1rSGo1X01Mb0pXeEFyU2ZsN0I4cEZvQlBDem4xX1ZFWm5rNzBlQ2pWSC11ZERkMi1aZnI1OE1COUlxWm14ZkR3SXZUclQ5RGhlN2RXMzFzTndrZWVwTy1MSHRkVEd6Sk90Rm9mUVM4aTU5TU4tV3VLWDk5MDczVUt5NzR0SmNKNEhqdUUyQmtSTVdMcUI2dzZGSUhkcHVTeHRSdXlIdlhncXg1UzFibWRTNEZETndrM3djNUNCOG14N0phUW5KRExrUDJiQU9ndHA3TXVZOF9vdkdfbGJ1RVRkVEV3NURoSnZvcFZ3Mng4U1c2MjdwYWVpbGZNb1pBZGVDa1J0V2hJMzJlRDRyejVQaENiZmJFbHZsNVhQVVlMOTJfSUJocThHc3FHOVRwMkJja2hvaXFwQkg2VV9TVkRPUi1MZVdzOUtEV2k2M19kMGc1LWdVRVNNY2tnTHFtN0tETVMyMF9fbWRuQllVRUdBU2h5RFlJZEhGSmtaLUNwRmtQOGJpZlZfbnRDdThDVldrcDdySl9OZExrS0Y2SEdxZ3U1VFMyX3FWMXFDQ1NUTTFadF9QdEpKVDlOZWVZclZwcVAxdi1PcVNFQUNYY0ljSWNEVU4xdFZaRHAtY0hKTmRLREZMRk9zanRFIiwNCiAgImUiOiAiQVFBQiIsDQogICJkIjogIkd1dm56ZWJhU3Y5U2N2dHVXT3V1WTFmWGFlUkpmUVRNWDRNcFRGZGl1QzE4eTBVdS1NMjNlSU1ya0plUzBLUGEyUk5KUVNxNC1nV1RJaFhyZGRQODFPQXBvdDItdDRXNnBJQ0hvd0tDTk8yeVhaWnZ5N3BJVlVPQ3JvQzZoVEdVaEZScjBpME5tS3hyakIzOFV3V1FVRENrRGdYLVpucDE2ZGFHbFZCQ09LdzZzOGw5el9UTnpqendjR3hBaHJ1YzNBUE05STAtalROUmQyV290V1ZBZUVVU0FlUlNXdmZyS0NUWWVhS0taZHAyLVdWVkJjUVVYaUUta1NmVm05bkZzcjVnZFVmUzRCTFBzTEFSd1kzaGU4OXMtcEgwTkl2Y3Uzb1BRQU1YczZwMi1JR3FzNjIwOVZma2lSeEYxdzRHMEdkNmE3Y3pTaXJVUkJqSnB5Y3hIT1ViQTNFSE5ESlFlbkl3LWpyVldSYXJJUVhKT2VueWdHamM5UmpIVENyY2xCamdoVU5OTFhsaV9RMjREQnJRVmo0NkE3NkJnYTdVT0tfbGZEa3VCSnZRRF9XcUxCOFJNa05nNmZES21vbGs2T3A1YmFSamNSVmJ6el8tOTk5dndsOHh4WDR2YmJFaktFUXc4S0hPN3BJdFE3NjBnMGhIdk1LNGd3SjZXYnVnbS14cnRKMVJUMWRGMGJZU045UTFHLVp4M3pSRVYzWFJDSnA2ajZOWmZSNDJWQWVLdzB2UkloYlJTd0N0cnRnUWRjTF9UQmY2M2dTYmsxZjRTaHJjUmJuR3lHVXFqemlQWGRMR3JwVmp0ZlB5UDZFZkh6TVJ2RVdHOHFpOFZsUlBJRFhIeTI2ZWpBZ29tancxZWVOTHlZSlhvdUJpOHlxMGwyMlphWG1TcmZVIiwNCiAgInAiOiAiLWlPQWpzLTRCbWVyemk3NmZXWEVaSzlwOTNrWmw1anA1N2xzWExrbTZhWDB1U0FROGlwRGJlckN3X1MxbHRRam1RcFdEWEtPSnNNaFJFYWxDUk5FVC0zWXhoYnJnNlJ1R2lVakhlZnBUeWN2MUN4SkhDVEY4SzlTeGF1TzV5Mkx3bFl2enZLaUFhTlB5d1Q0VEJaWmR0dF9CdzZGR0U4ckt4dkRrYUx6SWVkSjdDT1NkbjlfYnhCZXJhYXFYRktheHg1NWlLQ21qaXYxQXlmSFFncVpYN19zMVZCamdKYTc4dlJuUHlBcFlPSnJadXJ0alh3WC02RWR4eThubnljajVSM0liQmNGUmNXQWxvd05YX2hzOW5GdC1wZkpiS3BnQVI0cEdEaTQ5Q2tIVDRFOFprNk1laElLd2N1Q044OGgtV04wU2dTVEFSM1Jsd3VxeWlhS013IiwNCiAgInEiOiAiellzVFpEbnI0OUx2X0V4VjRmdTJLeWFUakgwV3ZRcDI2ZFVQQlFnSUZ2WTFaSGV6RUtHM2VhYWZ5d1pQemdrUFA1aG5YOU1nOVNtWS1aclBhc3pGQnJHNmFFNW9XUWJqZnBnUzRiVkxYYi0zc1JUNUlTdkdmU0JJenBsTDN6aVplXzRVbzlaZG1wQ1A5YVZCbEVsY21sbC1XRG50aXltd3lSakhYMTJldHZxV2JTcnhsSUNpaUJKR2JYSHhORDFib2lkQi1WVm1tZUVFTjR0UV9kR1hxU0laaHAtbzMxZmFsQXl2ek5QMzB1X0JWbXI2RmM4d3RUNkwxT21iemlEWE5QWHQ3UFhNQjhXemRJWjdTTmtUN1J0dF9IYTRtaWgtY1FjQzlLUldTMFk4aEZVOVZoUFRINVg2R1V2OHJOZlZlVGxpTXV2dksyNDZHT0hraHplRzZ3IiwNCiAgImRwIjogImlGNXNpdThobzVSSGJQdmRvaG1tTFVJWW9rdEtNWVN6R0pyVlFlUExIQnhXdzhxQWtwV0o5MVhDWXZSNVAwWmVOZVFWcl9VaEhHN0xKeDdnZ0ljWmVmM3diV1kzZGFoaVFpeTI3V251bnpGOC1NNF8tWER1M04yb1lZMjdOYnQxOHpmcmpvWm0zai03azdJYzc5WkxaZW9hWWExXzBCWHhNZXBMXzR6M3dpY0dfUThUblRpN0w4Q2I3VTNzbUxLTUlUd3pBOUtabXU3Sl83TmpCVlVqOHJoLWxIamtGa21YSThnc3RaU0NHb2kyQndEVEM0eDR3cjAtcjhXOGN4N3lpY2xuNTgzUkdRMm9vZXF1ckFDUzN2Uk9BZzFZU2I3RTRqY2dMazFXUF81U052ejlBY1dXX2tIeHpWOTJtWmg2TEMwVlNfa2NiOEppN2xiMUFJcHNVdyIsDQogICJkcSI6ICJTRjYyZGl5YXJMMmhkLURjd0ZPaklYQlV0VHQ1M1JlcEpNMjZteGZuMlVYWktNV29pNnVVOFVWRXJfUko5dzVqaXcyN0lCY3pYSDdILU9LVU0xTmo3LVoxN3JIa3RhdmlQN21GdEdqajMxOVlhd1lxYlk1X05hRV9ZVmJDU3hjZm0zT3Jpc0E0ZHVwOWRZMDVHTl8zdGZUYXNtLTZfcXV3TGk0R1RNS20xbUJHeEt0QklmdGt2cXBJbDlKdGplb29zR0JJTDJUdFdqTExERS1HTmNndE1RVHJuZVhyVExBZktzLUl1b0xMbUQ2SWdVZnJRX0NPZ3RKQjQ3WlpBR3U1dWxENDg5emJlTVVZV1dmY1VwcjBGQ0Q3U2NfM1VYZi1oUWRsLUFOQXl3SXczcHN3bkhVZ2VkZVJsb1NWczduTzFQN3FYMm1JN1c3REQtM0JUQWExX3ciLA0KICAicWkiOiAiN3JsZjZSdVhwOGl6eEtKaF9NRUpTNk92b25hcjdFZVQwN21LX3JwSGQtdDZGbE1WUEV1NklibTU4X1AwUTBIVTU3a29zR3VXcGVaNkFfY0dhTGZvXzk3Uzg4N0d0VTZ1dFFvUnN2LXN5dndXMWVuN2hRS3R1TmQ3UGFaZGE2ZGpEVGtwRnJfNFB1SDcxQ1BKa2NNTk9zTC1wN3lWcjdybGpqU1BUM1hrcko4TzNLZDBVNktCYjlrR0tXYl9qUGhKTlVDSXQ5NzFwcWliOUVtX1BraFprc1FvaDBmSFFTVml1enhJVnFheGpFbnF2TjJhSGQtVGIzQ1lhdXM1S09aTnpZd0dnQWNtRGJmS040MmlzbGRObE5Hb25lWUdScDNEdDgyZHBBUlA4MmFuMzdZY0M2dUg4alhlY3pLc2tiYlYwRE01ZXhUSFRYLVgxVGZkd3lCQ2xBIg0KfQ=="/&gt;
                &lt;L7p:VariableToSet stringValue="sender.key.jwk"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="ew0KICAia3R5IjogIlJTQSIsDQogICJ1c2UiOiAiZW5jIiwNCiAgImtpZCI6ICJyZWNpcGllbnQucHViIiwNCiAgIm4iOiAidHRkVkxOWFZqQmdHclhkRVU3cUdNR0hWc2xWUHk3d2RYbGhDMjlPdmthcXUwbXBYSzlVRmg4YjRmR0d3akFoVVh0NFoxX1pOTDloSXVwYldqaWRIejAxX3BnVEhTRVpVSF8zaGdwaldNUm5zOFVUMld6djdDaVhiT3dHYlN5b0JEWC1hMWdxRXp6NHdkUm5wdXpoWGt2eF9SX3B6SW1ReU01eWVUQ0lHSGNSQ1N2cG9DWnpVOU9Kcm9rWHVTc05CdnhvQ3JSQU8zMWhVcFZjSkc2cS13c1dxX1lOTmFZcWx3U1lKTWxkTW5qZHF5a2Z3R2Z1Q0VZSGxNdk1aSkZaRGJ2VjN5VXNEdTV1OXZhZy1zYk1PZ1ZjZUVBQkZvZWJ2RVZ3cFlwRVVzWnloTDdZNTFJbDdCWGRlWHFabjdpd1lQNm9RTjh5V1U0Qkc0MUNuOEladTBoSTYzV0pmMnVVajNhZUNuT2NpU0k5NkdkMEpCeElwUGMzeTZKMU1qLUltWEhja0ZaSUVsZ3JyVFRCNjM5Y1NaNHpyMFE1Y1oyekFIdHB3NjYwU2hKM3hhQVVkZU5NTkltWUQwd25rb21KMHFrbGRyZFRUaTgyQlJOOGI1M29VOS1xZG16TzBpYVVMb1VpMnpnQmFfV0JSQWp4M3d0NDVZbktZWG1FcEtBQnk1amZZY1JjeHFDWVRTYVpROWE0ZGFBQjVDdHRBQmdEeTFqcTlvaXJhWWZ1N1NjUkJuRTVzWGhuSlpOZDIxX0IxTk9ZWWU4VFlENGRzdS0wdG5iTV9SM0JndGtNcXRZOWpVVklMRkVpUGs1RDlMQXNfcm1nY1RDdHJLVi1FU0I3N1ZBbExwYXA2NzB6M1hoYU9jSlhudzZxZ24zNXYteEJ1S0JnRUJiWGRhQTgiLA0KICAiZSI6ICJBUUFCIiwNCn0="/&gt;
                &lt;L7p:VariableToSet stringValue="recipient.pub.jwk"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="TUlJRXJ6Q0NBcGNDRkNJZXNDNWg1dUR0Y0dyZW5hMUhnMVFRajVvK01BMEdDU3FHU0liM0RRRUJDd1VBTUJReEVqQVFCZ05WQkFNTUNYSmxZMmx3YVdWdWREQWVGdzB5TVRFeE1ERXlNakkyTURCYUZ3MHpNVEV3TXpBeU1qSTJNREJhTUJReEVqQVFCZ05WQkFNTUNYSmxZMmx3YVdWdWREQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQQURDQ0Fnb0NnZ0lCQUxiWFZTelYxWXdZQnExM1JGTzZoakJoMWJKVlQ4dThIVjVZUXR2VHI1R3FydEpxVnl2VkJZZkcrSHhoc0l3SVZGN2VHZGYyVFMvWVNMcVcxbzRuUjg5TmY2WUV4MGhHVkIvOTRZS1kxakVaN1BGRTlsczcrd29sMnpzQm0wc3FBUTEvbXRZS2hNOCtNSFVaNmJzNFY1TDhmMGY2Y3lKa01qT2Nua3dpQmgzRVFrcjZhQW1jMVBUaWE2SkY3a3JEUWI4YUFxMFFEdDlZVktWWENSdXF2c0xGcXYyRFRXbUtwY0VtQ1RKWFRKNDNhc3BIOEJuN2doR0I1VEx6R1NSV1EyNzFkOGxMQTd1YnZiMm9Qckd6RG9GWEhoQUFSYUhtN3hGY0tXS1JGTEdjb1MrMk9kU0pld1YzWGw2bVorNHNHRCtxRURmTWxsT0FSdU5RcC9DR2J0SVNPdDFpWDlybEk5Mm5ncHpuSWtpUGVobmRDUWNTS1QzTjh1aWRUSS9pSmx4M0pCV1NCSllLNjAwd2V0L1hFbWVNNjlFT1hHZHN3QjdhY091dEVvU2Q4V2dGSFhqVERTSm1BOU1KNUtKaWRLcEpYYTNVMDR2TmdVVGZHK2Q2RlBmcW5ac3p0SW1sQzZGSXRzNEFXdjFnVVFJOGQ4TGVPV0p5bUY1aEtTZ0FjdVkzMkhFWE1hZ21FMG1tVVBXdUhXZ0FlUXJiUUFZQTh0WTZ2YUlxMm1IN3UwbkVRWnhPYkY0WnlXVFhkdGZ3ZFRUbUdIdkUyQStIYkx2dExaMnpQMGR3WUxaREtyV1BZMUZTQ3hSSWo1T1EvU3dMUDY1b0hFd3JheWxmaEVnZSsxUUpTNldxZXU5TTkxNFdqbkNWNThPcW9KOStiL3NRYmlnWUJBVzEzV2dQQWdNQkFBRXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBQm0wdG9WVVVtZG5YVnRMOWpmY1J4UFIvVnJQaFNQV3RjZ2hSOFNiSDkyNTJTYUt3VlpVUGxMdTJMMFlmOG1CZngrQ1VIVEQ3NmhCZS9RdHVhRGI5b1ozTDVhWFVMWnZCNTU2NUNlaWVQK0oxRmg4cldVWXFUR2lrcG9ZRjJvdXJVdXpYWlFwM2wwWTYzcjQ4RUFqdEVvbU5TWFp5N3ZnMVFlQmxBVXVxdGdSeVd3TkJXWTh1TldwbisyaGtta3FkaXY1Z3B3WFNqaGNXZzhaeHY4UVZVcVRMcDhxbEx4aUZIUjdtVXNIM3EvbGcrbTBEWWJrYjdLSDFOWlo4anFMcHlFSzE5eVZEeDZJb29xUFRrZlpCdHYzc0NreVBONU8zS05ITmYrbWxEOE1Cb0NGbDEweTRFYTNwTk8yQlo4MWV3ZU5SK3o0T3RIc2hkNWlVZHdTTkhSdE9tRXkzKzE3TU4vYWlJNjk1NWUyK1dWTlc4cWUrS2lRdUszYXNRcHduRTcxYWFTRWNpNVFPUndJYWM2cFFiVWRROFROY2VJbTBzRC93SnZLbU9LMEFFNXdvbUVNSzl5K0gvbDd0a0hReW4rQ05GS0dRS1hXSHZ0UUpWRm1VUFNTV0RBRCtTbEU4S3RQL0RCSTVydjVQWFNkTXhhbXdNM1FMNUFSVVFxOUc2WFdCMlZGQWdzZ09sM1h4NDlWWjNtend6VlhpYm1JVkxxd1JLOUdZQ0dSb0xFV2RtNyt5Vk5oK3BMVWNkeXFMNHpuUEY4dG1OV1ZHTGdGVzhWNm1yRWR3akc0MTFqdVpPeTl2T0s4L0E2V3RoajFISjFvVWNKU2o5WlVzVkp5ekc3RjY1alVOZUtUNGt6MExBMFlUeDkrcGpsZlltdTZOZ3dFNWY2S1RJakc="/&gt;
                &lt;L7p:VariableToSet stringValue="recipient.cer.b64"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:EncodeDecode&gt;
                &lt;L7p:CharacterEncoding stringValueNull="null"/&gt;
                &lt;L7p:SourceVariableName stringValue="recipient.cer.b64"/&gt;
                &lt;L7p:TargetDataType variableDataType="cert"/&gt;
                &lt;L7p:TargetVariableName stringValue="recipient.crt"/&gt;
                &lt;L7p:TransformType transformType="BASE64_DECODE"/&gt;
            &lt;/L7p:EncodeDecode&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// Assign the key variables"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:All&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="1"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="1"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Encoding JWT with no security"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:EncodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Raw JWT"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:EncryptionSourceType intValue="2"/&gt;
                    &lt;L7p:SignatureAlgorithm stringValueNull="null"/&gt;
                    &lt;L7p:SignatureSourceType intValue="1"/&gt;
                    &lt;L7p:SourceVariable stringValue="${jwt.payload}"/&gt;
                    &lt;L7p:TargetVariable stringValue="jwt"/&gt;
                &lt;/L7p:EncodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="sig"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="enc"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="PGEgaHJlZj0iJHt1cmx9P3Rlc3Q9JHtuYXYubmV4dH0iPlRlc3QgJHtuYXYubmV4dH08L2E+"/&gt;
                    &lt;L7p:VariableToSet stringValue="navigation"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Raw JWT (1)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="2"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="2"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="4"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="4"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="5"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="5"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Signing using sender key in keystore (dropdown)"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:EncodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Sign using sender key in keystore"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:EncryptionSourceType intValue="2"/&gt;
                    &lt;L7p:KeyAlias stringValue="sender"/&gt;
                    &lt;L7p:KeyGoid goidValue="00000000000000000000000000000002"/&gt;
                    &lt;L7p:SignPayload booleanValue="true"/&gt;
                    &lt;L7p:SignatureAlgorithm stringValue="RS256"/&gt;
                    &lt;L7p:SignatureSourceType intValue="1"/&gt;
                    &lt;L7p:SourceVariable stringValue="${jwt.payload}"/&gt;
                    &lt;L7p:TargetVariable stringValue="jwt"/&gt;
                &lt;/L7p:EncodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="a2V5c3RvcmU6c2VuZGVy"/&gt;
                    &lt;L7p:VariableToSet stringValue="sig"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="enc"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Sign using keystore (2,4,5)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="3"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="3"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="6"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="6"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="7"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="7"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Signing using sender.key.jwk in context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:EncodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Sign using ${sender.key.jwk}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:EncryptionSourceType intValue="2"/&gt;
                    &lt;L7p:SignPayload booleanValue="true"/&gt;
                    &lt;L7p:SignatureAlgorithm stringValue="RS256"/&gt;
                    &lt;L7p:SignatureKeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:SignatureSourceType intValue="2"/&gt;
                    &lt;L7p:SignatureSourceVariable stringValue="${sender.key.jwk}"/&gt;
                    &lt;L7p:SourceVariable stringValue="${jwt.payload}"/&gt;
                    &lt;L7p:TargetVariable stringValue="jwt"/&gt;
                &lt;/L7p:EncodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="c2VuZGVyLmtleS5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="sig"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="enc"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Sign using JWK (3,6,7)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="8"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="8"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="10"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="10"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="11"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="11"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario (8,10,11)"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Encrypting using recipient.crt in context variable from recipient.crt.b64"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:EncodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Encrypt using ${recipient.crt}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:ContentEncryptionAlgorithm stringValue="A128CBC-HS256"/&gt;
                    &lt;L7p:EncryptPayload booleanValue="true"/&gt;
                    &lt;L7p:EncryptionKey stringValue="${recipient.crt}"/&gt;
                    &lt;L7p:EncryptionKeyType stringValue="Certificate"/&gt;
                    &lt;L7p:EncryptionSourceType intValue="2"/&gt;
                    &lt;L7p:KeyManagementAlgorithm stringValue="RSA-OAEP"/&gt;
                    &lt;L7p:SignatureAlgorithm stringValueNull="null"/&gt;
                    &lt;L7p:SignatureSourceType intValue="2"/&gt;
                    &lt;L7p:SourceVariable stringValue="${jwt.payload}"/&gt;
                    &lt;L7p:TargetVariable stringValue="jwt"/&gt;
                &lt;/L7p:EncodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="sig"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="cmVjaXBpZW50LmNydA=="/&gt;
                    &lt;L7p:VariableToSet stringValue="enc"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Encrypt using certificate"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="9"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="9"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="12"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="12"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="13"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="13"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Encrypting using recipient.pub.jwk in context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:EncodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Encrypt using ${recipient.pub.jwk}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:ContentEncryptionAlgorithm stringValue="A128CBC-HS256"/&gt;
                    &lt;L7p:EncryptPayload booleanValue="true"/&gt;
                    &lt;L7p:EncryptionKey stringValue="${recipient.pub.jwk}"/&gt;
                    &lt;L7p:EncryptionKeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:EncryptionSourceType intValue="2"/&gt;
                    &lt;L7p:KeyManagementAlgorithm stringValue="RSA-OAEP"/&gt;
                    &lt;L7p:SignatureAlgorithm stringValueNull="null"/&gt;
                    &lt;L7p:SignatureSourceType intValue="2"/&gt;
                    &lt;L7p:SourceVariable stringValue="${jwt.payload}"/&gt;
                    &lt;L7p:TargetVariable stringValue="jwt"/&gt;
                &lt;/L7p:EncodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="sig"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="cmVjaXBpZW50LnB1Yi5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="enc"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Encrypt using JWK (9,12,13)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="14"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="14"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="18"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="18"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="22"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="22"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="26"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="26"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="30"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="30"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Signing using sender key in keystore (dropdown)"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Encrypting using recipient.crt in context variable from recipient.crt.b64"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:EncodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Sign using sender key from keystore, encrypt using ${recipient.crt}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:ContentEncryptionAlgorithm stringValue="A128CBC-HS256"/&gt;
                    &lt;L7p:EncryptPayload booleanValue="true"/&gt;
                    &lt;L7p:EncryptionKey stringValue="${recipient.crt}"/&gt;
                    &lt;L7p:EncryptionKeyType stringValue="Certificate"/&gt;
                    &lt;L7p:EncryptionSourceType intValue="2"/&gt;
                    &lt;L7p:KeyAlias stringValue="sender"/&gt;
                    &lt;L7p:KeyGoid goidValue="00000000000000000000000000000002"/&gt;
                    &lt;L7p:KeyManagementAlgorithm stringValue="RSA-OAEP"/&gt;
                    &lt;L7p:SignPayload booleanValue="true"/&gt;
                    &lt;L7p:SignatureAlgorithm stringValue="RS256"/&gt;
                    &lt;L7p:SignatureSourceType intValue="1"/&gt;
                    &lt;L7p:SourceVariable stringValue="${jwt.payload}"/&gt;
                    &lt;L7p:TargetVariable stringValue="jwt"/&gt;
                &lt;/L7p:EncodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="a2V5c3RvcmU6c2VuZGVy"/&gt;
                    &lt;L7p:VariableToSet stringValue="sig"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="cmVjaXBpZW50LmNydA=="/&gt;
                    &lt;L7p:VariableToSet stringValue="enc"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Sign using keystore, encrypt using certificate (14,18,22,26,30)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="15"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="15"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="19"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="19"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="23"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="23"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="27"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="27"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="31"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="31"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Signing using sender.key.jwk in context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Encrypting using recipient.crt in context variable from recipient.crt.b64"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:EncodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Sign using ${sender.key.jwk}, encrypt using ${recipient.crt}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:ContentEncryptionAlgorithm stringValue="A128CBC-HS256"/&gt;
                    &lt;L7p:EncryptPayload booleanValue="true"/&gt;
                    &lt;L7p:EncryptionKey stringValue="${recipient.crt}"/&gt;
                    &lt;L7p:EncryptionKeyType stringValue="Certificate"/&gt;
                    &lt;L7p:EncryptionSourceType intValue="2"/&gt;
                    &lt;L7p:KeyManagementAlgorithm stringValue="RSA-OAEP"/&gt;
                    &lt;L7p:SignPayload booleanValue="true"/&gt;
                    &lt;L7p:SignatureAlgorithm stringValue="RS256"/&gt;
                    &lt;L7p:SignatureKeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:SignatureSourceType intValue="2"/&gt;
                    &lt;L7p:SignatureSourceVariable stringValue="${sender.key.jwk}"/&gt;
                    &lt;L7p:SourceVariable stringValue="${jwt.payload}"/&gt;
                    &lt;L7p:TargetVariable stringValue="jwt"/&gt;
                &lt;/L7p:EncodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="c2VuZGVyLmtleS5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="sig"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="cmVjaXBpZW50LmNydA=="/&gt;
                    &lt;L7p:VariableToSet stringValue="enc"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Sign using JWK, encrypt using certificate (15,19,23,27,31)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="16"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="16"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="20"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="20"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="24"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="24"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="28"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="28"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="32"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="32"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Signing using sender key in keystore (dropdown)"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Encrypting using recipient.pub.jwk in context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:EncodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Sign using sender key from keystore, encrypt using ${recipient.pub.jwk}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:ContentEncryptionAlgorithm stringValue="A128CBC-HS256"/&gt;
                    &lt;L7p:EncryptPayload booleanValue="true"/&gt;
                    &lt;L7p:EncryptionKey stringValue="${recipient.pub.jwk}"/&gt;
                    &lt;L7p:EncryptionKeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:EncryptionSourceType intValue="2"/&gt;
                    &lt;L7p:KeyAlias stringValue="sender"/&gt;
                    &lt;L7p:KeyGoid goidValue="00000000000000000000000000000002"/&gt;
                    &lt;L7p:KeyManagementAlgorithm stringValue="RSA-OAEP"/&gt;
                    &lt;L7p:SignPayload booleanValue="true"/&gt;
                    &lt;L7p:SignatureAlgorithm stringValue="RS256"/&gt;
                    &lt;L7p:SignatureSourceType intValue="1"/&gt;
                    &lt;L7p:SourceVariable stringValue="${jwt.payload}"/&gt;
                    &lt;L7p:TargetVariable stringValue="jwt"/&gt;
                &lt;/L7p:EncodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="a2V5c3RvcmU6c2VuZGVy"/&gt;
                    &lt;L7p:VariableToSet stringValue="sig"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="cmVjaXBpZW50LnB1Yi5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="enc"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Sign using keystore, encrypt using jwk (16,20,24,28,32)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="17"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="17"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="21"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="21"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="25"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="25"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="29"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="29"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="33"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="33"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Signing using sender.key.jwk in context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Encrypting using recipient.pub.jwk in context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:EncodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Sign using ${sender.key.jwk}, encrypt using ${recipient.pub.jwk}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:ContentEncryptionAlgorithm stringValue="A128CBC-HS256"/&gt;
                    &lt;L7p:EncryptPayload booleanValue="true"/&gt;
                    &lt;L7p:EncryptionKey stringValue="${recipient.pub.jwk}"/&gt;
                    &lt;L7p:EncryptionKeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:EncryptionSourceType intValue="2"/&gt;
                    &lt;L7p:KeyManagementAlgorithm stringValue="RSA-OAEP"/&gt;
                    &lt;L7p:SignPayload booleanValue="true"/&gt;
                    &lt;L7p:SignatureAlgorithm stringValue="RS256"/&gt;
                    &lt;L7p:SignatureKeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:SignatureSourceType intValue="2"/&gt;
                    &lt;L7p:SignatureSourceVariable stringValue="${sender.key.jwk}"/&gt;
                    &lt;L7p:SourceVariable stringValue="${jwt.payload}"/&gt;
                    &lt;L7p:TargetVariable stringValue="jwt"/&gt;
                &lt;/L7p:EncodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="c2VuZGVyLmtleS5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="sig"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="cmVjaXBpZW50LnB1Yi5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="enc"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${test}"/&gt;
                        &lt;L7p:Expression2 stringValue="33"/&gt;
                        &lt;L7p:Negate booleanValue="true"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:Negated booleanValue="true"/&gt;
                                &lt;L7p:RightValue stringValue="33"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:SetVariable&gt;
                        &lt;L7p:Base64Expression stringValue="PGEgaHJlZj0iJHt1cmx9P3Rlc3Q9JHtuYXYucHJldmlvdXN9Ij5UZXN0ICR7bmF2LnByZXZpb3VzfTwvYT4="/&gt;
                        &lt;L7p:VariableToSet stringValue="navigation"/&gt;
                    &lt;/L7p:SetVariable&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Reset navigation if ${test}=33"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Sign using jwk, encrypt using jwk (17,21,25,29,33)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${test}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Negated booleanValue="true"/&gt;
                            &lt;L7p:Operator operator="LT"/&gt;
                            &lt;L7p:RightValue stringValue="1"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Negated booleanValue="true"/&gt;
                            &lt;L7p:Operator operator="GT"/&gt;
                            &lt;L7p:RightValue stringValue="33"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValue="Something went wrong..."/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="failed"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:FalseAssertion/&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// ${test} value is valid but something failed..."/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${failed}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="boolean"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:RightValue stringValue="false"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;JWK Grok: Select test&lt;/title&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;h1&gt;JWK Grok: Select test&lt;/h1&gt;

  &lt;p&gt;Require test parameter between 1 and 33&lt;/p&gt;

  &lt;p&gt;E.g.${url}?test=1&lt;/p&gt;

  &lt;h2&gt;Tests where no JOSE happens&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="${url}?test=1"&gt;Test 1: sig:none, enc:none, val:none, decrypt:none&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests where no JWE happens&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="${url}?test=2"&gt;Test 2: sig:keystore, enc:none, val:none, decrypt:none&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=3"&gt;Test 3: sig:jwk, enc:none, val:none, decrypt:none&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=4"&gt;Test 4: sig:keystore, enc:none, val:certificate, decrypt:none&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=5"&gt;Test 5: sig:keystore, enc:none, val:jwk, decrypt:none&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=6"&gt;Test 6: sig:jwk, enc:none, val:jwk, decrypt:none&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=7"&gt;Test 7: sig:jwk, enc:none, val:certificate, decrypt:none&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests where no JWS happens&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="${url}?test=8"&gt;Test 8: sig:none, enc:certificate, val:none, decrypt:none&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=9"&gt;Test 9: sig:none, enc:jwk, val:none, decrypt:none&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=10"&gt;Test 10: sig:none, enc:certificate, val:none, decrypt:keystore&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=11"&gt;Test 11: sig:none, enc:certificate, val:none, decrypt:jwk&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=12"&gt;Test 12: sig:none, enc:jwk, val:none, decrypt:keystore&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=13"&gt;Test 13: sig:none, enc:jwk, val:none, decrypt:jwk&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests with full sender JOSE, no recipient JOSE&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="${url}?test=14"&gt;Test 14: sig:keystore, enc:certificate, val:none, decrypt:none&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=15"&gt;Test 15: sig:jwk, enc:certificate, val:none, decrypt:none&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=16"&gt;Test 16: sig:keystore, enc:jwk, val:none, decrypt:none&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=17"&gt;Test 17: sig:jwk, enc:jwk, val:none, decrypt:none&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests with full sender JOSE, recipient only JWE from keystore&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="${url}?test=18"&gt;Test 18: sig:keystore, enc:certificate, val:none, decrypt:keystore&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=19"&gt;Test 19: sig:jwk, enc:certificate, val:none, decrypt:keystore&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=20"&gt;Test 20: sig:keystore, enc:jwk, val:none, decrypt:keystore&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=21"&gt;Test 21: sig:jwk, enc:jwk, val:none, decrypt:keystore&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests with full sender JOSE, recipient only JWE from JWK&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="${url}?test=22"&gt;Test 22: sig:keystore, enc:certificate, val:none, decrypt:jwk&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=23"&gt;Test 23: sig:jwk, enc:certificate, val:none, decrypt:jwk&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=24"&gt;Test 24: sig:keystore, enc:jwk, val:none, decrypt:jwk&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=25"&gt;Test 25: sig:jwk, enc:jwk, val:none, decrypt:jwk&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests with full JOSE, recipient JWE from keystore&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="${url}?test=26"&gt;Test 26: sig:keystore, enc:certificate, val:certificate, decrypt:keystore&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=27"&gt;Test 27: sig:jwk, enc:certificate, val:jwk, decrypt:keystore&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=28"&gt;Test 28: sig:keystore, enc:jwk, val:certificate, decrypt:keystore&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=29"&gt;Test 29: sig:jwk, enc:jwk, val:jwk, decrypt:keystore&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests with full JOSE, recipient JWE from JWK&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="${url}?test=30"&gt;Test 30: sig:keystore, enc:certificate, val:certificate, decrypt:jwk&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=31"&gt;Test 31: sig:jwk, enc:certificate, val:jwk, decrypt:jwk&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=32"&gt;Test 32: sig:keystore, enc:jwk, val:certificate, decrypt:jwk&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="${url}?test=33"&gt;Test 33: sig:jwk, enc:jwk, val:jwk, decrypt:jwk&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;hr/&gt;
&lt;/body&gt;
&lt;/html&gt;]]&gt;&lt;/L7p:Content&gt;
                    &lt;L7p:ContentType stringValue="text/html; charset=UTF-8"/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:FalseAssertion/&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// ${test} value is not set"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// Handle different test scenarios"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;L7p:AuditDetailAssertion&gt;
            &lt;L7p:Detail stringValue="==&gt; Routing to http://localhost:8080/jwkRecipient?jwt=${jwt.compact}&amp;amp;sig=${sig}&amp;amp;enc=${enc}&amp;amp;test=${test}"/&gt;
            &lt;L7p:Level stringValue="FINE"/&gt;
        &lt;/L7p:AuditDetailAssertion&gt;
        &lt;L7p:HttpRoutingAssertion&gt;
            &lt;L7p:FailOnErrorStatus booleanValue="false"/&gt;
            &lt;L7p:HttpMethod httpMethod="GET"/&gt;
            &lt;L7p:ProtectedServiceUrl stringValue="http://localhost:8080/jwkRecipient?jwt=${jwt.compact}&amp;amp;sig=${sig}&amp;amp;enc=${enc}&amp;amp;test=${test}"/&gt;
            &lt;L7p:ProxyPassword stringValueNull="null"/&gt;
            &lt;L7p:ProxyUsername stringValueNull="null"/&gt;
            &lt;L7p:RequestHeaderRules httpPassthroughRuleSet="included"&gt;
                &lt;L7p:ForwardAll booleanValue="true"/&gt;
                &lt;L7p:Rules httpPassthroughRules="included"&gt;
                    &lt;L7p:item httpPassthroughRule="included"&gt;
                        &lt;L7p:Name stringValue="Cookie"/&gt;
                    &lt;/L7p:item&gt;
                    &lt;L7p:item httpPassthroughRule="included"&gt;
                        &lt;L7p:Name stringValue="SOAPAction"/&gt;
                    &lt;/L7p:item&gt;
                &lt;/L7p:Rules&gt;
            &lt;/L7p:RequestHeaderRules&gt;
            &lt;L7p:RequestParamRules httpPassthroughRuleSet="included"&gt;
                &lt;L7p:ForwardAll booleanValue="true"/&gt;
                &lt;L7p:Rules httpPassthroughRules="included"/&gt;
            &lt;/L7p:RequestParamRules&gt;
            &lt;L7p:ResponseHeaderRules httpPassthroughRuleSet="included"&gt;
                &lt;L7p:ForwardAll booleanValue="true"/&gt;
                &lt;L7p:Rules httpPassthroughRules="included"&gt;
                    &lt;L7p:item httpPassthroughRule="included"&gt;
                        &lt;L7p:Name stringValue="Set-Cookie"/&gt;
                    &lt;/L7p:item&gt;
                &lt;/L7p:Rules&gt;
            &lt;/L7p:ResponseHeaderRules&gt;
            &lt;L7p:SamlAssertionVersion intValue="2"/&gt;
        &lt;/L7p:HttpRoutingAssertion&gt;
        &lt;L7p:HardcodedResponse&gt;
            &lt;L7p:Base64ResponseBody stringValue="PGh0bWw+CjxoZWFkPgo8dGl0bGU+SldLIEdyb2sgUmVzcG9uc2U6IFRlc3QgIyR7dGVzdH08L3RpdGxlPgo8L2hlYWQ+Cgo8Ym9keT4KPGgxPkpXSyBHcm9rIFJlc3BvbnNlOiBUZXN0ICMke3Rlc3R9PC9oMT4KCjxwcmU+JHtyZXNwb25zZS5tYWlucGFydH08L3ByZT4KCjxoci8+CjxwPiR7bmF2aWdhdGlvbn0gfCA8YSBocmVmPSIke3VybH0iPkxpc3Qgb2YgVGVzdHM8L2E+PC9wPgo8L2JvZHk+CjwvaHRtbD4="/&gt;
            &lt;L7p:ResponseContentType stringValue="text/html; charset=UTF-8"/&gt;
        &lt;/L7p:HardcodedResponse&gt;
    &lt;/wsp:All&gt;
&lt;/wsp:Policy&gt;
</l7:Resource>
                        </l7:ResourceSet>
                    </l7:Resources>
                </l7:Service>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>recipient</l7:Name>
            <l7:Id>00000000000000000000000000000002:recipient</l7:Id>
            <l7:Type>SSG_KEY_ENTRY</l7:Type>
            <l7:TimeStamp>2021-11-01T17:52:36.869-07:00</l7:TimeStamp>
            <l7:Resource>
                <l7:PrivateKey alias="recipient" id="00000000000000000000000000000002:recipient" keystoreId="00000000000000000000000000000002">
                    <l7:CertificateChain>
                        <l7:CertificateData>
                            <l7:IssuerName>CN%3Drecipient</l7:IssuerName>
                            <l7:SerialNumber>194790056109413236624969190906763357772542089790</l7:SerialNumber>
                            <l7:SubjectName>CN%3Drecipient</l7:SubjectName>
                            <l7:Encoded>MIIErzCCApcCFCIesC5h5uDtcGrena1Hg1QQj5o+MA0GCSqGSIb3DQEBCwUAMBQxEjAQBgNVBAMMCXJlY2lwaWVudDAeFw0yMTExMDEyMjI2MDBaFw0zMTEwMzAyMjI2MDBaMBQxEjAQBgNVBAMMCXJlY2lwaWVudDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALbXVSzV1YwYBq13RFO6hjBh1bJVT8u8HV5YQtvTr5GqrtJqVyvVBYfG+HxhsIwIVF7eGdf2TS/YSLqW1o4nR89Nf6YEx0hGVB/94YKY1jEZ7PFE9ls7+wol2zsBm0sqAQ1/mtYKhM8+MHUZ6bs4V5L8f0f6cyJkMjOcnkwiBh3EQkr6aAmc1PTia6JF7krDQb8aAq0QDt9YVKVXCRuqvsLFqv2DTWmKpcEmCTJXTJ43aspH8Bn7ghGB5TLzGSRWQ271d8lLA7ubvb2oPrGzDoFXHhAARaHm7xFcKWKRFLGcoS+2OdSJewV3Xl6mZ+4sGD+qEDfMllOARuNQp/CGbtISOt1iX9rlI92ngpznIkiPehndCQcSKT3N8uidTI/iJlx3JBWSBJYK600wet/XEmeM69EOXGdswB7acOutEoSd8WgFHXjTDSJmA9MJ5KJidKpJXa3U04vNgUTfG+d6FPfqnZsztImlC6FIts4AWv1gUQI8d8LeOWJymF5hKSgAcuY32HEXMagmE0mmUPWuHWgAeQrbQAYA8tY6vaIq2mH7u0nEQZxObF4ZyWTXdtfwdTTmGHvE2A+HbLvtLZ2zP0dwYLZDKrWPY1FSCxRIj5OQ/SwLP65oHEwraylfhEge+1QJS6Wqeu9M914WjnCV58OqoJ9+b/sQbigYBAW13WgPAgMBAAEwDQYJKoZIhvcNAQELBQADggIBABm0toVUUmdnXVtL9jfcRxPR/VrPhSPWtcghR8SbH9252SaKwVZUPlLu2L0Yf8mBfx+CUHTD76hBe/QtuaDb9oZ3L5aXULZvB5565CeieP+J1Fh8rWUYqTGikpoYF2ourUuzXZQp3l0Y63r48EAjtEomNSXZy7vg1QeBlAUuqtgRyWwNBWY8uNWpn+2hkmkqdiv5gpwXSjhcWg8Zxv8QVUqTLp8qlLxiFHR7mUsH3q/lg+m0DYbkb7KH1NZZ8jqLpyEK19yVDx6IooqPTkfZBtv3sCkyPN5O3KNHNf+mlD8MBoCFl10y4Ea3pNO2BZ81eweNR+z4OtHshd5iUdwSNHRtOmEy3+17MN/aiI6955e2+WVNW8qe+KiQuK3asQpwnE71aaSEci5QORwIac6pQbUdQ8TNceIm0sD/wJvKmOK0AE5womEMK9y+H/l7tkHQyn+CNFKGQKXWHvtQJVFmUPSSWDAD+SlE8KtP/DBI5rv5PXSdMxamwM3QL5ARUQq9G6XWB2VFAgsgOl3Xx49VZ3mzwzVXibmIVLqwRK9GYCGRoLEWdm7+yVNh+pLUcdyqL4znPF8tmNWVGLgFW8V6mrEdwjG411juZOy9vOK8/A6Wthj1HJ1oUcJSj9ZUsVJyzG7F65jUNeKT4kz0LA0YTx9+pjlfYmu6NgwE5f6KTIjG</l7:Encoded>
                        </l7:CertificateData>
                    </l7:CertificateChain>
                    <l7:Properties>
                        <l7:Property key="keyAlgorithm">
                            <l7:StringValue>RSA</l7:StringValue>
                        </l7:Property>
                        <l7:Property key="keyData">
                            <l7:StringValue algorithm="RSA" bundleKey="$L7C2$1bead,W//pjcMyCCGQdrzi75COtH4GXIIxzSv6MBrJkEl7Ieg=$7wTNFNzBW+oZpXHRvlBfYix/yuDHYmuiacN8l5DJQDUzrFEaXMCDDGqgNZNys5jJ4MiWwvTt9ZeImvDHjBhjZ1kgmii7azAPUSHpkFJeXgnfsYITQ0txLHYzJNcF8ZfV">$L7C2$1,IEGyTIxJBAE36RunDHBv8a08TWmAdEJJ7zQy+D+unDU=$fdS+5B+jgevjis7oSiYjbKOUm+1Aiizwt37XR6f3KfHciGILuKx8+7wnAYt09MBuuftKvpoww/okMYlm6GygA5rUTaSYRPnswS0TJzinFpqxeofVOKm2nbKRj1djLUDmQIRSaFNETy1lkI//B4ZhsPo8yw1qMBEvvrz4lk/JEyNxyQSJP+poZY8abU51++5kfp/hxcDDuZq5RCIcfCpx/7F2jyZFOWPArapKQDw/sfwmofLkfd1MvZFDwQhQwHGkVirDmkNSlrV2YGgj1DDhqNB8JjmSZBAFZk9e5gXFZTDyRPdra72B/iDtivc+SIchBEt153BjZqMDIzANPuTFEJInFdd6Gohu/tk56yM6nsoRlea2fRpqkuMbsywcjtqeRa2qsTwjnJ61Op+Ues3dmga1nT2uDr9qD4ELsT6q6Cg4dzhheCK1NUlI8rUnxXu/OrEG/H0qGao98TAcE5m++i7BF0BbDSm/2tzdD307/EjyQtFvC+u+YyhCjT3cqjsabVxf7eVRd6OTsouPT0liR756m+a5UegAu858AIj/4MaTdrAeMQ4/teiy0HwnBLPs0sz4L+AoC2mdQGBSYexnfritgFT1y7eZoIjdC4hPbu2e12Gc4Ssr1OATu+eg6TJ03k2YwduDY5DTNBiLSF4pZXZ/c9f4rWW2HTHjS0ds7q6HgFECtO22/ND3VN1/OPQe4nFVPH1plloH3BhTK9ZZkCDOWxTvXoeixfcvBoqrjKDfNTcPpsOwSIkv8VX5m+MwSU06P1dWrVifNLnevxdYrcWuOKT0FmnxACoaGuWikOyJJMaUVUV6QdVgkbuWNPa5Xuajq/+0r2tL+sQrDj/X7+d7YHlBu66EFTT69DJJlfn8IdC4kPbm6+DaRsc4GrulRNrGsMzgaFDKC4HamiD25I7YlpGs4u29ftHyXuwqZWFHqrnQHGoInxkSXEjVcUWS/e7c20txSV4CNNk9gJf9kcuV9bmuW+keJUjwIzavQp/1nluloYC+O6JYrvMioMSn7HTmHVn1peUE+Krry/L8YN9ZTmJV6lX50YJFcRX4x+i4WrfVT+woE0qJKRmwJn1+IbMUPWarmE+eUiONx41Yhe65PfGf7LbpnULB96izwqDXDrPU6OEvO0yTDPCHsVgIsrln9a1Lsxt27n/qgm9Aw9NKqjOIQuS2qEvcdJRx7m7WaHGj1uE6Kbw3XbX24cJO6rxfzFQQH/hlkXIuK0L8Iw7cceCyO4j0w/F4U4uRhauxjKVL37vCbc+QhKTIgXqZ2oZHHrW/u2nQACgvQJd4eRAO3yvJl85fmasCO0K1BxfzHmVLlk2yeDaLq0doRSnxx30avGhppS71/OBOBvPB95EQKNID7U0Tkwh09uYzB7oualSzFDVqHnX3qqPDRxL0zENfPRFgdngdGXJoOOWnypnzcDdqUZce0mbe3+eD+Y5kYI++GepWD7qSCM5cLRpFs1LrWx0Kak7HJdlQ7M4o3e9fGykjL4Hw6vA1/5tGc50/ZrmtjhNnvW8oqNbexGcIXJYUKbmWneH7f7OhFDRmCnUiGne2CcIAVncujU58JVGJfqBsrs4DtBuPHxWN30c6JjUQxSLIX5rbBeZKDNqJRs1vrnP0U0cti8dKrXET1+r2LS7Jzit7L0fjFZOMqQQX80uc11c95RNoDLBM+MKgG7rYgSeuWJFTTlopENwW9jPLWhrMLtKqQz5TJ0POMWaxmbKcswJRgZqvVtWDIe87YDLxGMmCIafvBCZtYyf0spqMNhCR3ja+MOTKrwrEiNmu5NmiiRlK12WF5HNW0XvyQhyqF/KPkhjiZX3aSLMAourAttBiJ2f7WAShcAnGMKrjjcWP7RIe34U2z5IpJmRf/T4VL6pXgqBjZ1D/AYbnOdPzN5YRGwKhPu6EcbHvoZkNGT1p3q+AMqDzgqymVhre0UophKT6L2Puc8ljQhrA2Wg4VJms9usfPUCbxrUAWqHNdcS3ULTEzYDX7nxpfFziRwgj9uqg7bL0tAcZsDFjq0rinRJBC6KFNqjZ4TbsNwmEAdhQe+tqT1uRzVJVF0WidVIZCC3BJZlwqFaKIKfLQn706qBHD7QBr9qOl2ZGRf79bRlsJMfaBbEHOis/BCQCNsoHG7+uK0D17W7mEvQ8tAeI8QevgDunJvya2/l1rT6hlaMRyQMCc6n8o1gR354BFrI985oJEGecm5NwAuvDZtXI7R16sImCT28kQ5QuSuzhPULl1mChZyItEuSf6mb+T4Qy6/SUWBRHbHjnRcU3zRdhkWLu5jf9drPGjxBtHuPpXjmoThZ2oG6xDUGp4E9TANtQjXLd89clIoej9RVOLgcVTOhE8bFNuTgSbU1Hv2Reg0JdP8OVSc9bDQHSoNlu1TCwbo6B+lCW+A8avARnsbnJcJeyuJk62Ac+LV88md1+CAmbjPzFuTgCPysMLm4oD/f7qSNSL/BPS7WzOGltu7zikJcRZLPFEFRQA0MRbXmAVPWQ1whq0fi7FDfUKfULxS0TKR86KRk4stnE06zKgMBjzF64lGv2lz7IQ9qJHnz65lkdyLIOVtaubxwYtc7RTFzBkdZcvYjowyn/73FsTKro2hSBIVm1rBdb9rPqxwFVNpqdDVfDqbmqu820GBlXTuSy7DmI2LHhn5jb1eHbaaMeOZ9JRim2GJYelDG1aUasaVnTzNxI8t0buY/jsgFDQDsyqxNNxErdu/Rl6ctDY4zfX2f+qYY4NXM3uYPz8PJuI6OErzcSP/YsSZfBh/WTWLREaTFgkR61vXiJzG3hpuePJZtMiSIU4hJUPmtSK96irtwqanmzpEmBYc/C7HNpyjwiPilpeiVX78PimKnkdgIkOK5uPQ0qKWCn/K1FNgmlo3NiA2B9bgDMNCBJIHPR9Q7e5aiHQrOJe5lfJrX55dy1j0R1TCoLZbTCgHYENDuk13RQ5iqNDL5rOhvycFneuTCyMpimJvHe20YpJneyCIXhgAdQcaAwiqDVi/71ek2MRdHTD8SSBhpmXYqQnxLZ0JfDdnbUp3F3Aip6nG6FWn9bKdIr4pFubtJwkXWCLN185mIjr5ElVzY4RYx+Ss1zaSkDwEAEmPu8zGig/3t6nO+YgvQRXNLlSr+8Cbnf8CPbelS7Gdiy29Al5o5jyig+YpMC7b/OdvDf88n90BxqE00BrICCZmO1xAz0s7BKQ2B+9WXVH8uYjLD5AGjzWALbF0ELH/J8S0Gcwf5yL9ta+Os=</l7:StringValue>
                        </l7:Property>
                    </l7:Properties>
                </l7:PrivateKey>
            </l7:Resource>
        </l7:Item>
        <l7:Item>
            <l7:Name>JWK Recipient</l7:Name>
            <l7:Id>6ee2107e4cfec877a60af21e920d4271</l7:Id>
            <l7:Type>SERVICE</l7:Type>
            <l7:TimeStamp>2021-11-01T17:52:36.939-07:00</l7:TimeStamp>
            <l7:Resource>
                <l7:Service id="6ee2107e4cfec877a60af21e920d4271" version="4">
                    <l7:ServiceDetail folderId="6ee2107e4cfec877a60af21e920d422b" id="6ee2107e4cfec877a60af21e920d4271" version="4">
                        <l7:Name>JWK Recipient</l7:Name>
                        <l7:Enabled>true</l7:Enabled>
                        <l7:ServiceMappings>
                            <l7:HttpMapping>
                                <l7:UrlPattern>/jwkRecipient</l7:UrlPattern>
                                <l7:Verbs>
                                    <l7:Verb>GET</l7:Verb>
                                </l7:Verbs>
                            </l7:HttpMapping>
                        </l7:ServiceMappings>
                        <l7:Properties>
                            <l7:Property key="internal">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                            <l7:Property key="policyRevision">
                                <l7:LongValue>83</l7:LongValue>
                            </l7:Property>
                            <l7:Property key="soap">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                            <l7:Property key="tracingEnabled">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                            <l7:Property key="wssProcessingEnabled">
                                <l7:BooleanValue>false</l7:BooleanValue>
                            </l7:Property>
                        </l7:Properties>
                    </l7:ServiceDetail>
                    <l7:Resources>
                        <l7:ResourceSet tag="policy">
                            <l7:Resource type="policy" version="82">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;wsp:Policy xmlns:L7p="http://www.layer7tech.com/ws/policy" xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy"&gt;
    &lt;wsp:All wsp:Usage="Required"&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="********************************************************************************************************************"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Policy to demonstrate JWS using JWK - Recipient service"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Decrypt/validate JWT and generate report"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests where no JOSE happens"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 1: sig:none, enc:none, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests where no JWE happens"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 2: sig:keystore, enc:none, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 3: sig:jwk, enc:none, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 4: sig:keystore, enc:none, val:certificate, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 5: sig:keystore, enc:none, val:jwk, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 6: sig:jwk, enc:none, val:jwk, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 7: sig:jwk, enc:none, val:certificate, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests where no JWS happens"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 8: sig:none, enc:certificate, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 9: sig:none, enc:jwk, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 10: sig:none, enc:certificate, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 11: sig:none, enc:certificate, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 12: sig:none, enc:jwk, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 13: sig:none, enc:jwk, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests with full sender JOSE, no recipient JOSE"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 14: sig:keystore, enc:certificate, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 15: sig:jwk, enc:certificate, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 16: sig:keystore, enc:jwk, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 17: sig:jwk, enc:jwk, val:none, decrypt:none"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests with full sender JOSE, recipient only JWE from keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 18: sig:keystore, enc:certificate, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 19: sig:jwk, enc:certificate, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 20: sig:keystore, enc:jwk, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 21: sig:jwk, enc:jwk, val:none, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests with full sender JOSE, recipient only JWE from JWK"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 22: sig:keystore, enc:certificate, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 23: sig:jwk, enc:certificate, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 24: sig:keystore, enc:jwk, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 25: sig:jwk, enc:jwk, val:none, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests with full JOSE, recipient JWE from keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 26: sig:keystore, enc:certificate, val:certificate, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 27: sig:jwk, enc:certificate, val:jwk, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 28: sig:keystore, enc:jwk, val:certificate, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 29: sig:jwk, enc:jwk, val:jwk, decrypt:keystore"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* - Tests with full JOSE, recipient JWE from JWK"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 30: sig:keystore, enc:certificate, val:certificate, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 31: sig:jwk, enc:certificate, val:jwk, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 32: sig:keystore, enc:jwk, val:certificate, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* Test 33: sig:jwk, enc:jwk, val:jwk, decrypt:jwk"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="* "/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:CommentAssertion&gt;
            &lt;L7p:Comment stringValue="********************************************************************************************************************"/&gt;
        &lt;/L7p:CommentAssertion&gt;
        &lt;L7p:AuditAssertion/&gt;
        &lt;L7p:AuditDetailAssertion&gt;
            &lt;L7p:Detail stringValue="==&gt; Test=${request.http.parameter.test}"/&gt;
            &lt;L7p:Level stringValue="FINE"/&gt;
        &lt;/L7p:AuditDetailAssertion&gt;
        &lt;wsp:All wsp:Usage="Required"&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="ew0KICAia3R5IjogIlJTQSIsDQogICJraWQiOiAicmVjaXBpZW50LmtleSIsDQogICJuIjogInR0ZFZMTlhWakJnR3JYZEVVN3FHTUdIVnNsVlB5N3dkWGxoQzI5T3ZrYXF1MG1wWEs5VUZoOGI0ZkdHd2pBaFVYdDRaMV9aTkw5aEl1cGJXamlkSHowMV9wZ1RIU0VaVUhfM2hncGpXTVJuczhVVDJXenY3Q2lYYk93R2JTeW9CRFgtYTFncUV6ejR3ZFJucHV6aFhrdnhfUl9wekltUXlNNXllVENJR0hjUkNTdnBvQ1p6VTlPSnJva1h1U3NOQnZ4b0NyUkFPMzFoVXBWY0pHNnEtd3NXcV9ZTk5hWXFsd1NZSk1sZE1uamRxeWtmd0dmdUNFWUhsTXZNWkpGWkRidlYzeVVzRHU1dTl2YWctc2JNT2dWY2VFQUJGb2VidkVWd3BZcEVVc1p5aEw3WTUxSWw3QlhkZVhxWm43aXdZUDZvUU44eVdVNEJHNDFDbjhJWnUwaEk2M1dKZjJ1VWozYWVDbk9jaVNJOTZHZDBKQnhJcFBjM3k2SjFNai1JbVhIY2tGWklFbGdyclRUQjYzOWNTWjR6cjBRNWNaMnpBSHRwdzY2MFNoSjN4YUFVZGVOTU5JbVlEMHdua29tSjBxa2xkcmRUVGk4MkJSTjhiNTNvVTktcWRtek8waWFVTG9VaTJ6Z0JhX1dCUkFqeDN3dDQ1WW5LWVhtRXBLQUJ5NWpmWWNSY3hxQ1lUU2FaUTlhNGRhQUI1Q3R0QUJnRHkxanE5b2lyYVlmdTdTY1JCbkU1c1hobkpaTmQyMV9CMU5PWVllOFRZRDRkc3UtMHRuYk1fUjNCZ3RrTXF0WTlqVVZJTEZFaVBrNUQ5TEFzX3JtZ2NUQ3RyS1YtRVNCNzdWQWxMcGFwNjcwejNYaGFPY0pYbnc2cWduMzV2LXhCdUtCZ0VCYlhkYUE4IiwNCiAgImUiOiAiQVFBQiIsDQogICJkIjogIlBmR245cC1mVUc0WFhROXFBNV9PdEhlQXlZRWpucGRscjdfaExzNkJ6YXp3dTNLeGc3VVF3WlpFT3dkeG80OXkzZzBLM21LZ2RkUWxsNmxnbVJwdnRxaV8xVVFMSzg0XzBfTFVRc1Y2MDNuQUQyRll3VUlKNDc4OWpia1ducGxsYi1oS1ViZVFsUkd4b3dxYmFBVkhqaEdqSVlTVkd4S3MtMVZWUDlfTENLeWo5UGp1NUVyUXp3SWlpd0I4SWJJVEJTWlB2OGdQOGRUZ0lIX2pJdzl1djFmdWZTTE55RExqd3hNYXpJWk0tOUUwaWNGamM3b0VyOS05QWN6Z09MSk0tRHVMVUpQc2VOUGpyV3hoaVJ4cmpxQXdIQ1dyY1pWbWF4QTVLUjZUenpTTVd6aTJVTzRlMHBSRlVYVzVBalRJSmxGOFd4c2gxcm9feWVWYWNCOXJUWWVyYk9fOXpDa2s3QWh4UGNKY3JnWXRwMHZuTmdjX1Z4VXlvZmN0M3RkazkwVjBrdXJJdnlFQl9kc2xyaENkckt0cTVZamVGYXp2ZDF4N2pOZkxaVjdXN2ZhbjAyeHNqczZyWHRKR0UxME03X1J1dVU3UUlpX3pYVEFxUkQyZDg2X3c2dm5xaWtxWlJKRVcyaDlaUVIwRHdiSmp5N3IwaEZlSkU0aTFHS2NPbU56eWx4SFlTN3NWZ1F1a1JyUHJUTXU4NFAyOHdYZjJPYkRTSzlBejRoeTkyYTAwRGxSSHhCdE9UcTJ0UWRLNlUwMGFta0RhbU44Um5oYkY0OUNfSEt3N0h2YlhvTTF2b19yWWNOY3pvVDhsUHV2ZUJaampmN2luTEVRaDBrTWItQlROeDM3cjhCa1NsN2pnLWEyUHlvcmlNWmFwaWFaQ2dKU1VKZWxoMG9rIiwNCiAgInAiOiAiMm9OM25sZE8zb3h1VGZBOHlKV3VHYmhVcm5DWm44NlVOSG5xSGJ3NkRYNldzNnZyejBDd2IxRDFqMGFYeU05ZDJ2ZmVhTmpmeDgxYWp0enRadmt2eEZYX2paTUJMZzQyYXYwaVU4eloyVTF6X0VmSVFxdExKUENNcmlBWndKQkNJbFE1SmlCRUdpWEFrSjRnYzBkcG00VUlCTk9qMzljVDZFaUlVUHRiSDFjUm9KZDNMYUpNOE11OS1SVzNHejZGdnk0VV9YZi1XeW9QTjRXUHJscF90RlpIQXFPa2VONzIySVRXeWVaVTJxTjJNWEp3UDBNR1pHZWpQakIwbllJb05nUzVjNGxaVFdod0NZbk1tZkl5SU51b2w4amhMRU91WEZNb2lnUmM3SUwtMm5GRlJHZ2dZc1NDWDU4VWh3SEZhZ1NzSUU4VXlzV1h6UkZjT1V1VWZRIiwNCiAgInEiOiAiMWpVNmlQcmI4TTk2NlFaSXNldVlKOWRRZFNvZV9kRURqTmJNMUUtZUIwQklpQnAwYWNyVDBlVnFZRGNSdkE1Z2o1WktXS0xsaTFESFhOX0R0WWlNTS1VVFNjM05McmkyajBEZ1czVDcteVdFWTYwc1NpTE1oQnphYXZDRnlsOTg0aGhrb3o1cXhYRFMyQzN5dzJEWWhOUjZjN2ZXQUJONUV1RXJzdVRuVnI4RDI0R0xPeW80WWhyMUxKeGhaMHlBcDBTRXJsYWtTUmt1RGktRmJLQlRXNC1aQUxaUU1pN2RXQmVsVlFvZjI4T2h4YUlrelVFVDNRX2FJUUpSc3ByWm5oaVJ6VUtFMTY0WTNSWkFPZkFDd2FkWFV4TzRJb3hjbF90UlQwYzdtNlRRTFFWNDNtZ2tNTDRiclcwZlJCZWc1ZDhQcWZXdWV4d1NvR3czaDU1UWV3IiwNCiAgImRwIjogIlhfQTB4cnFDa0VlTDdvQTV6Ny1ZRHdiVmR6bE0yZE16VXM3c01WNEJCd2U3VnV0MnZ5b2h6TjM0MG8wbC15N0FnSEV2bjAwSkE0cHY1aVd0dmZaT09KLWhjaUZHOVZlY0lPRS1feGdEMWRxaHZfUXNRc2stVnR1ZWlKempjWjVreXZtN2xiZTQ3dG9BYl81ZE5QXzNxQ2FDWE13bk9SSVBWWDd6Q3NzeE9OTmJrLXlza01hZmpXR0c2U1BWbndxV1lsZnpNMDVKeVBEd2VXb1VxWEptZTJFZUVGU1UwOVRoQUROaXNvYUVYdkpCNUhmZ1BJWkstaTVlaC1GeWNlMUJobVlRbmwtQmFfRWNyN05tdDNpVTljUTdnMWpaTkR3TEE5SW5ER0hhQXFXSkM1T0wyX3J6clNtbUxDR0dPN2hWV3JUdWRja0MwZnhySjhnbGU2cHBhUSIsDQogICJkcSI6ICJtck9Za2NNeXd1amxhSk84UHByYXFiTnNEU0lkZmN2TkY1TXVIUXRmSXZkX0txU0lmTHNhWFpXbFROV1l2a3RYMjN0OE9DVjFTRGRQdERoNjNJbEFVRjVabnN5LUtjY0hPZEJ0LUQ4MW1MMFFydmdyYTJOVWR2bHJtUjRhVWZ6Q2NYdVNldjhpRjNRVElrT1U5eHZqWTVNYzJLUGxMdXJoWHd3MkJoNGhJVm9VekJ2ejFRZjU3b2h2bHdkZHBUX3dEbDJDd1hJYmRodDBVcFJwZFBrWkdxQkxyT0wtYWlfRWRkR2wteE96eklDdVBkQ0xhWjFkWGlNTHN4azhyWlAtSkpxei1oelhXZmtIUmV6Qzk5VHAtTGdGYmg5b3RiTFBVSWdWd2Y2OUF2eDF5SDRTT19YVVpVdDNLN29LZ1pfYS1Ra3ZBOTFHWk96eVd0LXNfd29NTHciLA0KICAicWkiOiAiV3R2X2hveVgzVmhpUEE2SVREWXU2b0J1V1pQMWpNYlNzWFJLMlktWmNkQThFOGRCTjYzU012VWpVdG5vVVZpeGdZV2tsWE5qZHBvbFhJei1ZeWlhNVdxei1tUTRFOW02ZlFoelk3ZnlHR2xCY0lFUmI1NVV5em1NVHRMWGQ5TUhlUjZhcGYzMHRVVW03SnZ4NzJibGxJMVNtRW1mc1d6YkZPWlVsYU1WUzlmU2hZVG84X0lrQkxZQ1ZDUUkxb3pqc0Rhd2gzRHpjeVMxMExGRHJFUEctQ24tbzFmVWVXdVBJMzh4RTYtSV9YZ2VFQTZ1SjdCeHZtUGJuWUp1cllUeUVsY2xwYmdfRjNISEVGbnhBaF9WbldrMDdxUXM0VUoyQ21BQ3FPeDRnWkZweVV5eVkzS0swRlJhTm50aEdpYWJHUlBxcVJ2eXQ5TE13YWZZcnltVGRnIg0KfQ=="/&gt;
                &lt;L7p:VariableToSet stringValue="recipient.key.jwk"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="ew0KICAia3R5IjogIlJTQSIsDQogICJ1c2UiOiAic2lnIiwNCiAgImtpZCI6ICJzZW5kZXIucHViIiwNCiAgIm4iOiAieU5aU0s3cmlYQkt4THdBUllNYlZ6aDQyTVphcS1nalhUTGF0UVdIYkdHV04yV3JPcWlTTTMwczJ6bmNORnlERXF2RkxLckMyY1JUZWdmQjc1ZjJTU0I5dHI1eThLeVFjS0JMRlJMQkhGaXhVMWlYN09jbTk5RWZxMkNYTHh4N1otQXIyRkpsRjE0Mm9wdlpBTW1qeDZ2MEJjbjZvUlg4SkExMHN1ZUlXbFByUzY0VVN4NUtaYlNjMnZJOUlZbl9NZF9ZOHJsTWtIajVfTUxvSld4QXJTZmw3QjhwRm9CUEN6bjFfVkVabms3MGVDalZILXVkRGQyLVpmcjU4TUI5SXFabXhmRHdJdlRyVDlEaGU3ZFczMXNOd2tlZXBPLUxIdGRUR3pKT3RGb2ZRUzhpNTlNTi1XdUtYOTkwNzNVS3k3NHRKY0o0SGp1RTJCa1JNV0xxQjZ3NkZJSGRwdVN4dFJ1eUh2WGdxeDVTMWJtZFM0RkROd2szd2M1Q0I4bXg3SmFRbkpETGtQMmJBT2d0cDdNdVk4X292R19sYnVFVGRURXc1RGhKdm9wVncyeDhTVzYyN3BhZWlsZk1vWkFkZUNrUnRXaEkzMmVENHJ6NVBoQ2JmYkVsdmw1WFBVWUw5Ml9JQmhxOEdzcUc5VHAyQmNraG9pcXBCSDZVX1NWRE9SLUxlV3M5S0RXaTYzX2QwZzUtZ1VFU01ja2dMcW03S0RNUzIwX19tZG5CWVVFR0FTaHlEWUlkSEZKa1otQ3BGa1A4YmlmVl9udEN1OENWV2twN3JKX05kTGtLRjZIR3FndTVUUzJfcVYxcUNDU1RNMVp0X1B0SkpUOU5lZVlyVnBxUDF2LU9xU0VBQ1hjSWNJY0RVTjF0VlpEcC1jSEpOZEtERkxGT3NqdEUiLA0KICAiZSI6ICJBUUFCIiwNCn0="/&gt;
                &lt;L7p:VariableToSet stringValue="sender.pub.jwk"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:SetVariable&gt;
                &lt;L7p:Base64Expression stringValue="TUlJRXFUQ0NBcEVDRkNBOXZMMGgyS0JCdjFhVWhoeEU3WHcyMCs2ZE1BMEdDU3FHU0liM0RRRUJDd1VBTUJFeER6QU5CZ05WQkFNTUJuTmxibVJsY2pBZUZ3MHlNVEV4TURFeU1qSTFOREphRncwek1URXdNekF5TWpJMU5ESmFNQkV4RHpBTkJnTlZCQU1NQm5ObGJtUmxjakNDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFNaldVaXU2NGx3U3NTOEFFV0RHMWM0ZU5qR1dxdm9JMTB5MnJVRmgyeGhsamRscXpxb2tqTjlMTnM1M0RSY2d4S3J4U3lxd3RuRVUzb0h3ZStYOWtrZ2ZiYStjdkNza0hDZ1N4VVN3UnhZc1ZOWWwrem5KdmZSSDZ0Z2x5OGNlMmZnSzloU1pSZGVOcUtiMlFESm84ZXI5QVhKK3FFVi9DUU5kTExuaUZwVDYwdXVGRXNlU21XMG5OcnlQU0dKL3pIZjJQSzVUSkI0K2Z6QzZDVnNRSzBuNWV3ZktSYUFUd3M1OWYxUkdaNU85SGdvMVIvcm5RM2R2bVg2K2ZEQWZTS21ac1h3OENMMDYwL1E0WHUzVnQ5YkRjSkhucVR2aXg3WFV4c3lUclJhSDBFdkl1ZlREZmxyaWwvZmRPOTFDc3UrTFNYQ2VCNDdoTmdaRVRGaTZnZXNPaFNCM2Fia3NiVWJzaDcxNEtzZVV0VzVuVXVCUXpjSk44SE9RZ2ZKc2V5V2tKeVF5NUQ5bXdEb0xhZXpMbVBQNkx4djVXN2hFM1V4TU9RNFNiNktWY05zZkVsdXR1Nldub3BYektHUUhYZ3BFYlZvU045bmcrSzgrVDRRbTMyeEpiNWVWejFHQy9kdnlBWWF2QnJLaHZVNmRnWEpJYUlxcVFSK2xQMGxRemtmaTNsclBTZzFvdXQvM2RJT2ZvRkJFakhKSUM2cHV5Z3pFdHRQLzVuWndXRkJCZ0VvY2cyQ0hSeFNaR2ZncVJaRC9HNG4xZjU3UXJ2QWxWcEtlNnlmelhTNUNoZWh4cW9MdVUwdHY2bGRhZ2dra3pOV2JmejdTU1UvVFhubUsxYWFqOWIvanFraEFBbDNDSENIQTFEZGJWV1E2Zm5CeVRYU2d4U3hUckk3UkFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUNMT1dWdWVsOWpYRE5VSXFrUy9VUHdXaStRTjVKQ2dNSk5IVzd0enhLMFNrYXdIWmk1MlhXOWV1cUhpdU1DMmVhQVEwM2grSFpuVVdzT05tTWw1VmZhdTMvSmNNQ1QzU2J6M1BDMEUvd0hncE9MOHRHblRBU2VoVEZoRC9naStLVlg2eVY3V3Q3WDFYYmpEU09uTmd5cU40TXhvTlcxcUNQTGRMS243cnJkaVAwanNUdW5tRldhK1NFVC9tRkc0SndBalI5dnpyb1lsRmJtVnRLcjYvTEdScmxDVlQ4THEvQWRTTk9Ra0RmTEFKeWdWbS90SzYxRjR0NGxiUHFoM1piUGE3YUxDWWN1UlM1K0RVNXREK2xGQ201U0JrRFliWEgyRmQxalM0QWxRS29ZWW9BdmMxTjFmbTNNc1l4Q2YybG1YcTV6MDF5Rmtuc2RwZHE5UEUwSmJnUWNJOGtCNzRwZHh5d3RBaHp0NkVPZ2JjQllxaWRESFo3R1l4U3FCamc3Qk1MT2RkeWFRMnc3N0YrTXluVlE1SktodFhNeDFXR3M4TjdyOW5RcUt6SEdrTFpubzU0cVprOU1KTHpQWHNjTHlGaHI4SXZVcE1GUnJSSUFNakwxSXlERlhQd20zMWg2bHNHUXFsdytUd082N3ZNZ21KRDVYejhRZWZuK0ZOc0IzYjBxN3lrOEo4cjhJWjRKYVRYRytVQ3lrWk5WZHNYU29aWWZXL1FkSXZRUGtiUy9EWVpjdVBGN0RlMmkvTmVkdndDbU9sOHROdzIvV0FjSEp1aUtuUnNCdU1oNThDUXI5VVB2RERISThadGlIbXhOVU9aUFczNFQ5clVvSEJUZ1ZYaFQxZFRvOFJlcXhhSFJkRERkdE1tL2s3ck0zNy9xWVV0OFNNclVo"/&gt;
                &lt;L7p:VariableToSet stringValue="sender.cer.b64"/&gt;
            &lt;/L7p:SetVariable&gt;
            &lt;L7p:EncodeDecode&gt;
                &lt;L7p:CharacterEncoding stringValueNull="null"/&gt;
                &lt;L7p:SourceVariableName stringValue="sender.cer.b64"/&gt;
                &lt;L7p:TargetDataType variableDataType="cert"/&gt;
                &lt;L7p:TargetVariableName stringValue="sender.crt"/&gt;
                &lt;L7p:TransformType transformType="BASE64_DECODE"/&gt;
            &lt;/L7p:EncodeDecode&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// Assign the key variables"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:All&gt;
        &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="1"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="1"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="2"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="2"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="3"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="3"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="8"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="8"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="9"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="9"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="14"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="14"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="15"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="15"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="16"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="16"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="17"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="17"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="decryption"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="validation"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Decoding JWT with no validation"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Validation: None"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:SourcePayload stringValue="${request.http.parameter.jwt}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt"/&gt;
                    &lt;L7p:ValidationType stringValue="None"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UG9zdCBEZWNvZGluZyBSZXN1bHRzOg0KPT09PT09PT09PT09PT09PT09PT09PQ0Kand0LnZhbGlkOiAke2p3dC52YWxpZH0NCmp3dC50eXBlOiAke2p3dC50eXBlfQ0Kand0LmhlYWRlci5uYW1lczogJHtqd3QuaGVhZGVyLm5hbWVzfQ0Kand0LmhlYWRlci50eXA6ICR7and0LmhlYWRlci50eXB9DQpqd3QuaGVhZGVyLmFsZzogJHtqd3QuaGVhZGVyLmFsZ30NCmp3dC5oZWFkZXIuZW5jOiAke2p3dC5oZWFkZXIuZW5jfQ0Kand0LmhlYWRlci5jdHk6ICR7and0LmhlYWRlci5jdHl9DQpqd3QucGF5bG9hZDogJHtqd3QucGF5bG9hZH0NCmp3dC5zaWduYXR1cmU6ICR7and0LnNpZ25hdHVyZX0NCmp3dC5lbmNyeXB0ZWRfa2V5OiAke2p3dC5lbmNyeXB0ZWRfa2V5fQ0Kand0LmluaXRpYWxpemF0aW9uX3ZlY3RvcjogJHtqd3QuaW5pdGlhbGl6YXRpb25fdmVjdG9yfQ0Kand0LmNpcGhlcl90ZXh0OiAke2p3dC5jaXBoZXJfdGV4dH0NCmp3dC5hdXRoZW50aWNhdGlvbl90YWc6ICR7and0LmF1dGhlbnRpY2F0aW9uX3RhZ30NCmp3dC5wbGFpbnRleHQ6ICR7and0LnBsYWludGV4dH0="/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Decryption: none, Validation: none (1,2,3,8,9,14,15,16,17)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="4"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="4"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="7"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="7"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="decryption"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="c2VuZGVyLmNydA=="/&gt;
                    &lt;L7p:VariableToSet stringValue="validation"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Validating JWT using sender.crt in context variable from sender.cer.b64"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Validation: ${sender.crt}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyType stringValue="Certificate"/&gt;
                    &lt;L7p:PrivateKeySource stringValue="${sender.crt}"/&gt;
                    &lt;L7p:SourcePayload stringValue="${request.http.parameter.jwt}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From Context Variable"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UG9zdCBWYWxpZGF0aW9uIFJlc3VsdHM6DQo9PT09PT09PT09PT09PT09PT09PT09PT0NCmp3dC52YWxpZDogJHtqd3QudmFsaWR9DQpqd3QudHlwZTogJHtqd3QudHlwZX0NCmp3dC5oZWFkZXIubmFtZXM6ICR7and0LmhlYWRlci5uYW1lc30NCmp3dC5oZWFkZXIudHlwOiAke2p3dC5oZWFkZXIudHlwfQ0Kand0LmhlYWRlci5hbGc6ICR7and0LmhlYWRlci5hbGd9DQpqd3QuaGVhZGVyLmVuYzogJHtqd3QuaGVhZGVyLmVuY30NCmp3dC5oZWFkZXIuY3R5OiAke2p3dC5oZWFkZXIuY3R5fQ0Kand0LnBheWxvYWQ6ICR7and0LnBheWxvYWR9DQpqd3Quc2lnbmF0dXJlOiAke2p3dC5zaWduYXR1cmV9DQpqd3QuZW5jcnlwdGVkX2tleTogJHtqd3QuZW5jcnlwdGVkX2tleX0NCmp3dC5pbml0aWFsaXphdGlvbl92ZWN0b3I6ICR7and0LmluaXRpYWxpemF0aW9uX3ZlY3Rvcn0NCmp3dC5jaXBoZXJfdGV4dDogJHtqd3QuY2lwaGVyX3RleHR9DQpqd3QuYXV0aGVudGljYXRpb25fdGFnOiAke2p3dC5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QucGxhaW50ZXh0OiAke2p3dC5wbGFpbnRleHR9"/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Decryption: none, Validation: certificate (4,7)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="5"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="5"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="6"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="6"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="decryption"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="c2VuZGVyLnB1Yi5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="validation"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Validating against sender.pub.jwk in context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Validation: ${sender.pub.jwk}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:PrivateKeySource stringValue="${sender.pub.jwk}"/&gt;
                    &lt;L7p:SourcePayload stringValue="${request.http.parameter.jwt}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From Context Variable"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UG9zdCBWYWxpZGF0aW9uIFJlc3VsdHM6DQo9PT09PT09PT09PT09PT09PT09PT09PT0NCmp3dC52YWxpZDogJHtqd3QudmFsaWR9DQpqd3QudHlwZTogJHtqd3QudHlwZX0NCmp3dC5oZWFkZXIubmFtZXM6ICR7and0LmhlYWRlci5uYW1lc30NCmp3dC5oZWFkZXIudHlwOiAke2p3dC5oZWFkZXIudHlwfQ0Kand0LmhlYWRlci5hbGc6ICR7and0LmhlYWRlci5hbGd9DQpqd3QuaGVhZGVyLmVuYzogJHtqd3QuaGVhZGVyLmVuY30NCmp3dC5oZWFkZXIuY3R5OiAke2p3dC5oZWFkZXIuY3R5fQ0Kand0LnBheWxvYWQ6ICR7and0LnBheWxvYWR9DQpqd3Quc2lnbmF0dXJlOiAke2p3dC5zaWduYXR1cmV9DQpqd3QuZW5jcnlwdGVkX2tleTogJHtqd3QuZW5jcnlwdGVkX2tleX0NCmp3dC5pbml0aWFsaXphdGlvbl92ZWN0b3I6ICR7and0LmluaXRpYWxpemF0aW9uX3ZlY3Rvcn0NCmp3dC5jaXBoZXJfdGV4dDogJHtqd3QuY2lwaGVyX3RleHR9DQpqd3QuYXV0aGVudGljYXRpb25fdGFnOiAke2p3dC5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QucGxhaW50ZXh0OiAke2p3dC5wbGFpbnRleHR9"/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Decryption: none, Validation: jwk (5,6)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="10"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="10"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="12"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="12"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="18"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="18"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="19"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="19"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="20"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="20"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="21"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="21"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="a2V5c3RvcmU6cmVjaXBpZW50"/&gt;
                    &lt;L7p:VariableToSet stringValue="decryption"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="validation"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Decrypting using recipient key in keystore (dropdown)"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Decryption: keystore"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyAlias stringValue="recipient"/&gt;
                    &lt;L7p:KeyGoid goidValue="00000000000000000000000000000002"/&gt;
                    &lt;L7p:SourcePayload stringValue="${request.http.parameter.jwt}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From List"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UG9zdCBEZWNyeXB0aW9uIFJlc3VsdHM6DQo9PT09PT09PT09PT09PT09PT09PT09PT0NCmp3dC52YWxpZDogJHtqd3QudmFsaWR9DQpqd3QudHlwZTogJHtqd3QudHlwZX0NCmp3dC5oZWFkZXIubmFtZXM6ICR7and0LmhlYWRlci5uYW1lc30NCmp3dC5oZWFkZXIudHlwOiAke2p3dC5oZWFkZXIudHlwfQ0Kand0LmhlYWRlci5hbGc6ICR7and0LmhlYWRlci5hbGd9DQpqd3QuaGVhZGVyLmVuYzogJHtqd3QuaGVhZGVyLmVuY30NCmp3dC5oZWFkZXIuY3R5OiAke2p3dC5oZWFkZXIuY3R5fQ0Kand0LnBheWxvYWQ6ICR7and0LnBheWxvYWR9DQpqd3Quc2lnbmF0dXJlOiAke2p3dC5zaWduYXR1cmV9DQpqd3QuZW5jcnlwdGVkX2tleTogJHtqd3QuZW5jcnlwdGVkX2tleX0NCmp3dC5pbml0aWFsaXphdGlvbl92ZWN0b3I6ICR7and0LmluaXRpYWxpemF0aW9uX3ZlY3Rvcn0NCmp3dC5jaXBoZXJfdGV4dDogJHtqd3QuY2lwaGVyX3RleHR9DQpqd3QuYXV0aGVudGljYXRpb25fdGFnOiAke2p3dC5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QucGxhaW50ZXh0OiAke2p3dC5wbGFpbnRleHR9"/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Decryption: keystore, Validation: none (10,12,18,19,20,21)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="11"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="11"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="13"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="13"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="22"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="22"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="23"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="23"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="24"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="24"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="25"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="25"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="cmVjaXBpZW50LmtleS5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="decryption"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="bm9uZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="validation"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Decrypting using recipient.key.jwk context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Decryption: ${recipient.key.jwk}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:PrivateKeySource stringValue="${recipient.key.jwk}"/&gt;
                    &lt;L7p:SourcePayload stringValue="${request.http.parameter.jwt}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From Context Variable"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UG9zdCBEZWNyeXB0aW9uIFJlc3VsdHM6DQo9PT09PT09PT09PT09PT09PT09PT09PT0NCmp3dC52YWxpZDogJHtqd3QudmFsaWR9DQpqd3QudHlwZTogJHtqd3QudHlwZX0NCmp3dC5oZWFkZXIubmFtZXM6ICR7and0LmhlYWRlci5uYW1lc30NCmp3dC5oZWFkZXIudHlwOiAke2p3dC5oZWFkZXIudHlwfQ0Kand0LmhlYWRlci5hbGc6ICR7and0LmhlYWRlci5hbGd9DQpqd3QuaGVhZGVyLmVuYzogJHtqd3QuaGVhZGVyLmVuY30NCmp3dC5oZWFkZXIuY3R5OiAke2p3dC5oZWFkZXIuY3R5fQ0Kand0LnBheWxvYWQ6ICR7and0LnBheWxvYWR9DQpqd3Quc2lnbmF0dXJlOiAke2p3dC5zaWduYXR1cmV9DQpqd3QuZW5jcnlwdGVkX2tleTogJHtqd3QuZW5jcnlwdGVkX2tleX0NCmp3dC5pbml0aWFsaXphdGlvbl92ZWN0b3I6ICR7and0LmluaXRpYWxpemF0aW9uX3ZlY3Rvcn0NCmp3dC5jaXBoZXJfdGV4dDogJHtqd3QuY2lwaGVyX3RleHR9DQpqd3QuYXV0aGVudGljYXRpb25fdGFnOiAke2p3dC5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QucGxhaW50ZXh0OiAke2p3dC5wbGFpbnRleHR9"/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Decryption: jwk, Validation: none (11,13,22,23,24,25)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="26"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="26"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="28"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="28"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="a2V5c3RvcmU6cmVjaXBpZW50"/&gt;
                    &lt;L7p:VariableToSet stringValue="decryption"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="c2VuZGVyLmNydA=="/&gt;
                    &lt;L7p:VariableToSet stringValue="validation"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Decrypting using recipient key in keystore (dropdown)"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Decryption: keystore"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyAlias stringValue="recipient"/&gt;
                    &lt;L7p:KeyGoid goidValue="00000000000000000000000000000002"/&gt;
                    &lt;L7p:SourcePayload stringValue="${request.http.parameter.jwt}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From List"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UG9zdCBEZWNyeXB0aW9uIFJlc3VsdHM6DQo9PT09PT09PT09PT09PT09PT09PT09PT0NCmp3dC52YWxpZDogJHtqd3QudmFsaWR9DQpqd3QudHlwZTogJHtqd3QudHlwZX0NCmp3dC5oZWFkZXIubmFtZXM6ICR7and0LmhlYWRlci5uYW1lc30NCmp3dC5oZWFkZXIudHlwOiAke2p3dC5oZWFkZXIudHlwfQ0Kand0LmhlYWRlci5hbGc6ICR7and0LmhlYWRlci5hbGd9DQpqd3QuaGVhZGVyLmVuYzogJHtqd3QuaGVhZGVyLmVuY30NCmp3dC5oZWFkZXIuY3R5OiAke2p3dC5oZWFkZXIuY3R5fQ0Kand0LnBheWxvYWQ6ICR7and0LnBheWxvYWR9DQpqd3Quc2lnbmF0dXJlOiAke2p3dC5zaWduYXR1cmV9DQpqd3QuZW5jcnlwdGVkX2tleTogJHtqd3QuZW5jcnlwdGVkX2tleX0NCmp3dC5pbml0aWFsaXphdGlvbl92ZWN0b3I6ICR7and0LmluaXRpYWxpemF0aW9uX3ZlY3Rvcn0NCmp3dC5jaXBoZXJfdGV4dDogJHtqd3QuY2lwaGVyX3RleHR9DQpqd3QuYXV0aGVudGljYXRpb25fdGFnOiAke2p3dC5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QucGxhaW50ZXh0OiAke2p3dC5wbGFpbnRleHR9"/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Validating JWT using sender.crt in context variable from sender.cer.b64"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Validation: ${sender.crt}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyType stringValue="Certificate"/&gt;
                    &lt;L7p:PrivateKeySource stringValue="${sender.crt}"/&gt;
                    &lt;L7p:SourcePayload stringValue="${jwt.plaintext}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt2"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From Context Variable"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtyZXN1bHR9DQoNClBvc3QgVmFsaWRhdGlvbiBSZXN1bHRzOg0KPT09PT09PT09PT09PT09PT09PT09PT09DQpqd3QyLnZhbGlkOiAke2p3dDIudmFsaWR9DQpqd3QyLnR5cGU6ICR7and0Mi50eXBlfQ0Kand0Mi5oZWFkZXIubmFtZXM6ICR7and0Mi5oZWFkZXIubmFtZXN9DQpqd3QyLmhlYWRlci50eXA6ICR7and0Mi5oZWFkZXIudHlwfQ0Kand0Mi5oZWFkZXIuYWxnOiAke2p3dDIuaGVhZGVyLmFsZ30NCmp3dDIuaGVhZGVyLmVuYzogJHtqd3QyLmhlYWRlci5lbmN9DQpqd3QyLmhlYWRlci5jdHk6ICR7and0Mi5oZWFkZXIuY3R5fQ0Kand0Mi5wYXlsb2FkOiAke2p3dDIucGF5bG9hZH0NCmp3dDIuc2lnbmF0dXJlOiAke2p3dDIuc2lnbmF0dXJlfQ0Kand0Mi5lbmNyeXB0ZWRfa2V5OiAke2p3dDIuZW5jcnlwdGVkX2tleX0NCmp3dDIuaW5pdGlhbGl6YXRpb25fdmVjdG9yOiAke2p3dDIuaW5pdGlhbGl6YXRpb25fdmVjdG9yfQ0Kand0Mi5jaXBoZXJfdGV4dDogJHtqd3QyLmNpcGhlcl90ZXh0fQ0Kand0Mi5hdXRoZW50aWNhdGlvbl90YWc6ICR7and0Mi5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QyLnBsYWludGV4dDogJHtqd3QyLnBsYWludGV4dH0="/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Decryption: keystore, Validation: certificate (26,28)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="27"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="27"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="29"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="29"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="a2V5c3RvcmU6cmVjaXBpZW50"/&gt;
                    &lt;L7p:VariableToSet stringValue="decryption"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="c2VuZGVyLnB1Yi5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="validation"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Decrypting using recipient key in keystore (dropdown)"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Decryption: keystore"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyAlias stringValue="recipient"/&gt;
                    &lt;L7p:KeyGoid goidValue="00000000000000000000000000000002"/&gt;
                    &lt;L7p:SourcePayload stringValue="${request.http.parameter.jwt}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From List"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UG9zdCBEZWNyeXB0aW9uIFJlc3VsdHM6DQo9PT09PT09PT09PT09PT09PT09PT09PT0NCmp3dC52YWxpZDogJHtqd3QudmFsaWR9DQpqd3QudHlwZTogJHtqd3QudHlwZX0NCmp3dC5oZWFkZXIubmFtZXM6ICR7and0LmhlYWRlci5uYW1lc30NCmp3dC5oZWFkZXIudHlwOiAke2p3dC5oZWFkZXIudHlwfQ0Kand0LmhlYWRlci5hbGc6ICR7and0LmhlYWRlci5hbGd9DQpqd3QuaGVhZGVyLmVuYzogJHtqd3QuaGVhZGVyLmVuY30NCmp3dC5oZWFkZXIuY3R5OiAke2p3dC5oZWFkZXIuY3R5fQ0Kand0LnBheWxvYWQ6ICR7and0LnBheWxvYWR9DQpqd3Quc2lnbmF0dXJlOiAke2p3dC5zaWduYXR1cmV9DQpqd3QuZW5jcnlwdGVkX2tleTogJHtqd3QuZW5jcnlwdGVkX2tleX0NCmp3dC5pbml0aWFsaXphdGlvbl92ZWN0b3I6ICR7and0LmluaXRpYWxpemF0aW9uX3ZlY3Rvcn0NCmp3dC5jaXBoZXJfdGV4dDogJHtqd3QuY2lwaGVyX3RleHR9DQpqd3QuYXV0aGVudGljYXRpb25fdGFnOiAke2p3dC5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QucGxhaW50ZXh0OiAke2p3dC5wbGFpbnRleHR9"/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Validating against sender.pub.jwk in context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Validation: ${sender.pub.jwk}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:PrivateKeySource stringValue="${sender.pub.jwk}"/&gt;
                    &lt;L7p:SourcePayload stringValue="${jwt.plaintext}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt2"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From Context Variable"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtyZXN1bHR9DQoNClBvc3QgVmFsaWRhdGlvbiBSZXN1bHRzOg0KPT09PT09PT09PT09PT09PT09PT09PT09DQpqd3QyLnZhbGlkOiAke2p3dDIudmFsaWR9DQpqd3QyLnR5cGU6ICR7and0Mi50eXBlfQ0Kand0Mi5oZWFkZXIubmFtZXM6ICR7and0Mi5oZWFkZXIubmFtZXN9DQpqd3QyLmhlYWRlci50eXA6ICR7and0Mi5oZWFkZXIudHlwfQ0Kand0Mi5oZWFkZXIuYWxnOiAke2p3dDIuaGVhZGVyLmFsZ30NCmp3dDIuaGVhZGVyLmVuYzogJHtqd3QyLmhlYWRlci5lbmN9DQpqd3QyLmhlYWRlci5jdHk6ICR7and0Mi5oZWFkZXIuY3R5fQ0Kand0Mi5wYXlsb2FkOiAke2p3dDIucGF5bG9hZH0NCmp3dDIuc2lnbmF0dXJlOiAke2p3dDIuc2lnbmF0dXJlfQ0Kand0Mi5lbmNyeXB0ZWRfa2V5OiAke2p3dDIuZW5jcnlwdGVkX2tleX0NCmp3dDIuaW5pdGlhbGl6YXRpb25fdmVjdG9yOiAke2p3dDIuaW5pdGlhbGl6YXRpb25fdmVjdG9yfQ0Kand0Mi5jaXBoZXJfdGV4dDogJHtqd3QyLmNpcGhlcl90ZXh0fQ0Kand0Mi5hdXRoZW50aWNhdGlvbl90YWc6ICR7and0Mi5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QyLnBsYWludGV4dDogJHtqd3QyLnBsYWludGV4dH0="/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Decryption: keystore, Validation: jwk (27,29)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="30"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="30"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="32"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="32"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="cmVjaXBpZW50LmtleS5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="decryption"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="c2VuZGVyLmNydA=="/&gt;
                    &lt;L7p:VariableToSet stringValue="validation"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Decrypting using recipient.key.jwk context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Decryption: ${recipient.key.jwk}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:PrivateKeySource stringValue="${recipient.key.jwk}"/&gt;
                    &lt;L7p:SourcePayload stringValue="${request.http.parameter.jwt}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From Context Variable"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UG9zdCBEZWNyeXB0aW9uIFJlc3VsdHM6DQo9PT09PT09PT09PT09PT09PT09PT09PT0NCmp3dC52YWxpZDogJHtqd3QudmFsaWR9DQpqd3QudHlwZTogJHtqd3QudHlwZX0NCmp3dC5oZWFkZXIubmFtZXM6ICR7and0LmhlYWRlci5uYW1lc30NCmp3dC5oZWFkZXIudHlwOiAke2p3dC5oZWFkZXIudHlwfQ0Kand0LmhlYWRlci5hbGc6ICR7and0LmhlYWRlci5hbGd9DQpqd3QuaGVhZGVyLmVuYzogJHtqd3QuaGVhZGVyLmVuY30NCmp3dC5oZWFkZXIuY3R5OiAke2p3dC5oZWFkZXIuY3R5fQ0Kand0LnBheWxvYWQ6ICR7and0LnBheWxvYWR9DQpqd3Quc2lnbmF0dXJlOiAke2p3dC5zaWduYXR1cmV9DQpqd3QuZW5jcnlwdGVkX2tleTogJHtqd3QuZW5jcnlwdGVkX2tleX0NCmp3dC5pbml0aWFsaXphdGlvbl92ZWN0b3I6ICR7and0LmluaXRpYWxpemF0aW9uX3ZlY3Rvcn0NCmp3dC5jaXBoZXJfdGV4dDogJHtqd3QuY2lwaGVyX3RleHR9DQpqd3QuYXV0aGVudGljYXRpb25fdGFnOiAke2p3dC5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QucGxhaW50ZXh0OiAke2p3dC5wbGFpbnRleHR9"/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Validating JWT using sender.crt in context variable from sender.cer.b64"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Validation: ${sender.crt}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyType stringValue="Certificate"/&gt;
                    &lt;L7p:PrivateKeySource stringValue="${sender.crt}"/&gt;
                    &lt;L7p:SourcePayload stringValue="${jwt.plaintext}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt2"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From Context Variable"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtyZXN1bHR9DQoNClBvc3QgVmFsaWRhdGlvbiBSZXN1bHRzOg0KPT09PT09PT09PT09PT09PT09PT09PT09DQpqd3QyLnZhbGlkOiAke2p3dDIudmFsaWR9DQpqd3QyLnR5cGU6ICR7and0Mi50eXBlfQ0Kand0Mi5oZWFkZXIubmFtZXM6ICR7and0Mi5oZWFkZXIubmFtZXN9DQpqd3QyLmhlYWRlci50eXA6ICR7and0Mi5oZWFkZXIudHlwfQ0Kand0Mi5oZWFkZXIuYWxnOiAke2p3dDIuaGVhZGVyLmFsZ30NCmp3dDIuaGVhZGVyLmVuYzogJHtqd3QyLmhlYWRlci5lbmN9DQpqd3QyLmhlYWRlci5jdHk6ICR7and0Mi5oZWFkZXIuY3R5fQ0Kand0Mi5wYXlsb2FkOiAke2p3dDIucGF5bG9hZH0NCmp3dDIuc2lnbmF0dXJlOiAke2p3dDIuc2lnbmF0dXJlfQ0Kand0Mi5lbmNyeXB0ZWRfa2V5OiAke2p3dDIuZW5jcnlwdGVkX2tleX0NCmp3dDIuaW5pdGlhbGl6YXRpb25fdmVjdG9yOiAke2p3dDIuaW5pdGlhbGl6YXRpb25fdmVjdG9yfQ0Kand0Mi5jaXBoZXJfdGV4dDogJHtqd3QyLmNpcGhlcl90ZXh0fQ0Kand0Mi5hdXRoZW50aWNhdGlvbl90YWc6ICR7and0Mi5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QyLnBsYWludGV4dDogJHtqd3QyLnBsYWludGV4dH0="/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Decryption: jwk, Validation: certificate (30,32)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;wsp:OneOrMore wsp:Usage="Required"&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="31"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="31"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:ComparisonAssertion&gt;
                        &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                        &lt;L7p:Expression1 stringValue="${request.http.parameter.test}"/&gt;
                        &lt;L7p:Expression2 stringValue="33"/&gt;
                        &lt;L7p:Predicates predicates="included"&gt;
                            &lt;L7p:item binary="included"&gt;
                                &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                                &lt;L7p:RightValue stringValue="33"/&gt;
                            &lt;/L7p:item&gt;
                        &lt;/L7p:Predicates&gt;
                    &lt;/L7p:ComparisonAssertion&gt;
                    &lt;L7p:assertionComment&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Confirm the test scenario"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:assertionComment&gt;
                &lt;/wsp:OneOrMore&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="cmVjaXBpZW50LmtleS5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="decryption"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="c2VuZGVyLnB1Yi5qd2s="/&gt;
                    &lt;L7p:VariableToSet stringValue="validation"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Decrypting using recipient.key.jwk context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Decryption: ${recipient.key.jwk}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:PrivateKeySource stringValue="${recipient.key.jwk}"/&gt;
                    &lt;L7p:SourcePayload stringValue="${request.http.parameter.jwt}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From Context Variable"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="UG9zdCBEZWNyeXB0aW9uIFJlc3VsdHM6DQo9PT09PT09PT09PT09PT09PT09PT09PT0NCmp3dC52YWxpZDogJHtqd3QudmFsaWR9DQpqd3QudHlwZTogJHtqd3QudHlwZX0NCmp3dC5oZWFkZXIubmFtZXM6ICR7and0LmhlYWRlci5uYW1lc30NCmp3dC5oZWFkZXIudHlwOiAke2p3dC5oZWFkZXIudHlwfQ0Kand0LmhlYWRlci5hbGc6ICR7and0LmhlYWRlci5hbGd9DQpqd3QuaGVhZGVyLmVuYzogJHtqd3QuaGVhZGVyLmVuY30NCmp3dC5oZWFkZXIuY3R5OiAke2p3dC5oZWFkZXIuY3R5fQ0Kand0LnBheWxvYWQ6ICR7and0LnBheWxvYWR9DQpqd3Quc2lnbmF0dXJlOiAke2p3dC5zaWduYXR1cmV9DQpqd3QuZW5jcnlwdGVkX2tleTogJHtqd3QuZW5jcnlwdGVkX2tleX0NCmp3dC5pbml0aWFsaXphdGlvbl92ZWN0b3I6ICR7and0LmluaXRpYWxpemF0aW9uX3ZlY3Rvcn0NCmp3dC5jaXBoZXJfdGV4dDogJHtqd3QuY2lwaGVyX3RleHR9DQpqd3QuYXV0aGVudGljYXRpb25fdGFnOiAke2p3dC5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QucGxhaW50ZXh0OiAke2p3dC5wbGFpbnRleHR9"/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:AuditDetailAssertion&gt;
                    &lt;L7p:Detail stringValue="==&gt; Validating against sender.pub.jwk in context variable"/&gt;
                    &lt;L7p:Level stringValue="FINE"/&gt;
                &lt;/L7p:AuditDetailAssertion&gt;
                &lt;L7p:DecodeJsonWebToken&gt;
                    &lt;L7p:AssertionComment assertionComment="included"&gt;
                        &lt;L7p:Properties mapValue="included"&gt;
                            &lt;L7p:entry&gt;
                                &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                                &lt;L7p:value stringValue="// Validation: ${sender.pub.jwk}"/&gt;
                            &lt;/L7p:entry&gt;
                        &lt;/L7p:Properties&gt;
                    &lt;/L7p:AssertionComment&gt;
                    &lt;L7p:FailUnverifiedSignature booleanValue="true"/&gt;
                    &lt;L7p:KeyType stringValue="JSON Web Key"/&gt;
                    &lt;L7p:PrivateKeySource stringValue="${sender.pub.jwk}"/&gt;
                    &lt;L7p:SourcePayload stringValue="${jwt.plaintext}"/&gt;
                    &lt;L7p:TargetVariablePrefix stringValue="jwt2"/&gt;
                    &lt;L7p:ValidationType stringValue="Using Recipient Key From Context Variable"/&gt;
                &lt;/L7p:DecodeJsonWebToken&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="JHtyZXN1bHR9DQoNClBvc3QgVmFsaWRhdGlvbiBSZXN1bHRzOg0KPT09PT09PT09PT09PT09PT09PT09PT09DQpqd3QyLnZhbGlkOiAke2p3dDIudmFsaWR9DQpqd3QyLnR5cGU6ICR7and0Mi50eXBlfQ0Kand0Mi5oZWFkZXIubmFtZXM6ICR7and0Mi5oZWFkZXIubmFtZXN9DQpqd3QyLmhlYWRlci50eXA6ICR7and0Mi5oZWFkZXIudHlwfQ0Kand0Mi5oZWFkZXIuYWxnOiAke2p3dDIuaGVhZGVyLmFsZ30NCmp3dDIuaGVhZGVyLmVuYzogJHtqd3QyLmhlYWRlci5lbmN9DQpqd3QyLmhlYWRlci5jdHk6ICR7and0Mi5oZWFkZXIuY3R5fQ0Kand0Mi5wYXlsb2FkOiAke2p3dDIucGF5bG9hZH0NCmp3dDIuc2lnbmF0dXJlOiAke2p3dDIuc2lnbmF0dXJlfQ0Kand0Mi5lbmNyeXB0ZWRfa2V5OiAke2p3dDIuZW5jcnlwdGVkX2tleX0NCmp3dDIuaW5pdGlhbGl6YXRpb25fdmVjdG9yOiAke2p3dDIuaW5pdGlhbGl6YXRpb25fdmVjdG9yfQ0Kand0Mi5jaXBoZXJfdGV4dDogJHtqd3QyLmNpcGhlcl90ZXh0fQ0Kand0Mi5hdXRoZW50aWNhdGlvbl90YWc6ICR7and0Mi5hdXRoZW50aWNhdGlvbl90YWd9DQpqd3QyLnBsYWludGV4dDogJHtqd3QyLnBsYWludGV4dH0="/&gt;
                    &lt;L7p:VariableToSet stringValue="result"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// Decryption: jwk, Validation: jwk (31,33)"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${test}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Negated booleanValue="true"/&gt;
                            &lt;L7p:Operator operator="LT"/&gt;
                            &lt;L7p:RightValue stringValue="1"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:Negated booleanValue="true"/&gt;
                            &lt;L7p:Operator operator="GT"/&gt;
                            &lt;L7p:RightValue stringValue="33"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValue="Something went wrong..."/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:SetVariable&gt;
                    &lt;L7p:Base64Expression stringValue="dHJ1ZQ=="/&gt;
                    &lt;L7p:VariableToSet stringValue="failed"/&gt;
                &lt;/L7p:SetVariable&gt;
                &lt;L7p:FalseAssertion/&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// ${test} value is valid but something failed..."/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;wsp:All wsp:Usage="Required"&gt;
                &lt;L7p:ComparisonAssertion&gt;
                    &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                    &lt;L7p:Expression1 stringValue="${failed}"/&gt;
                    &lt;L7p:Operator operatorNull="null"/&gt;
                    &lt;L7p:Predicates predicates="included"&gt;
                        &lt;L7p:item dataType="included"&gt;
                            &lt;L7p:Type variableDataType="boolean"/&gt;
                        &lt;/L7p:item&gt;
                        &lt;L7p:item binary="included"&gt;
                            &lt;L7p:CaseSensitive booleanValue="false"/&gt;
                            &lt;L7p:RightValue stringValue="false"/&gt;
                        &lt;/L7p:item&gt;
                    &lt;/L7p:Predicates&gt;
                &lt;/L7p:ComparisonAssertion&gt;
                &lt;L7p:CustomizeErrorResponse&gt;
                    &lt;L7p:Content stringValueReference="inline"&gt;&lt;![CDATA[&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;JWK Grok: Select test&lt;/title&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;h1&gt;JWK Grok: Select test&lt;/h1&gt;

  &lt;p&gt;Require test parameter between 1 and 33&lt;/p&gt;


  &lt;h2&gt;Tests where no JOSE happens&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;Test 1: sig:none, enc:none, val:none, decrypt:none&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests where no JWE happens&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;Test 2: sig:keystore, enc:none, val:none, decrypt:none&lt;/li&gt;
    &lt;li&gt;Test 3: sig:jwk, enc:none, val:none, decrypt:none&lt;/li&gt;
    &lt;li&gt;Test 4: sig:keystore, enc:none, val:certificate, decrypt:none&lt;/li&gt;
    &lt;li&gt;Test 5: sig:keystore, enc:none, val:jwk, decrypt:none&lt;/li&gt;
    &lt;li&gt;Test 6: sig:jwk, enc:none, val:jwk, decrypt:none&lt;/li&gt;
    &lt;li&gt;Test 7: sig:jwk, enc:none, val:certificate, decrypt:none&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests where no JWS happens&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;Test 8: sig:none, enc:certificate, val:none, decrypt:none&lt;/li&gt;
    &lt;li&gt;Test 9: sig:none, enc:jwk, val:none, decrypt:none&lt;/li&gt;
    &lt;li&gt;Test 10: sig:none, enc:certificate, val:none, decrypt:keystore&lt;/li&gt;
    &lt;li&gt;Test 11: sig:none, enc:certificate, val:none, decrypt:jwk&lt;/li&gt;
    &lt;li&gt;Test 12: sig:none, enc:jwk, val:none, decrypt:keystore&lt;/li&gt;
    &lt;li&gt;Test 13: sig:none, enc:jwk, val:none, decrypt:jwk&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests with full sender JOSE, no recipient JOSE&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;Test 14: sig:keystore, enc:certificate, val:none, decrypt:none&lt;/li&gt;
    &lt;li&gt;Test 15: sig:jwk, enc:certificate, val:none, decrypt:none&lt;/li&gt;
    &lt;li&gt;Test 16: sig:keystore, enc:jwk, val:none, decrypt:none&lt;/li&gt;
    &lt;li&gt;Test 17: sig:jwk, enc:jwk, val:none, decrypt:none&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests with full sender JOSE, recipient only JWE from keystore&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;Test 18: sig:keystore, enc:certificate, val:none, decrypt:keystore&lt;/li&gt;
    &lt;li&gt;Test 19: sig:jwk, enc:certificate, val:none, decrypt:keystore&lt;/li&gt;
    &lt;li&gt;Test 20: sig:keystore, enc:jwk, val:none, decrypt:keystore&lt;/li&gt;
    &lt;li&gt;Test 21: sig:jwk, enc:jwk, val:none, decrypt:keystore&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests with full sender JOSE, recipient only JWE from JWK&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;Test 22: sig:keystore, enc:certificate, val:none, decrypt:jwk&lt;/li&gt;
    &lt;li&gt;Test 23: sig:jwk, enc:certificate, val:none, decrypt:jwk&lt;/li&gt;
    &lt;li&gt;Test 24: sig:keystore, enc:jwk, val:none, decrypt:jwk&lt;/li&gt;
    &lt;li&gt;Test 25: sig:jwk, enc:jwk, val:none, decrypt:jwk&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests with full JOSE, recipient JWE from keystore&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;Test 26: sig:keystore, enc:certificate, val:certificate, decrypt:keystore&lt;/li&gt;
    &lt;li&gt;Test 27: sig:jwk, enc:certificate, val:jwk, decrypt:keystore&lt;/li&gt;
    &lt;li&gt;Test 28: sig:keystore, enc:jwk, val:certificate, decrypt:keystore&lt;/li&gt;
    &lt;li&gt;Test 29: sig:jwk, enc:jwk, val:jwk, decrypt:keystore&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Tests with full JOSE, recipient JWE from JWK&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;Test 30: sig:keystore, enc:certificate, val:certificate, decrypt:jwk&lt;/li&gt;
    &lt;li&gt;Test 31: sig:jwk, enc:certificate, val:jwk, decrypt:jwk&lt;/li&gt;
    &lt;li&gt;Test 32: sig:keystore, enc:jwk, val:certificate, decrypt:jwk&lt;/li&gt;
    &lt;li&gt;Test 33: sig:jwk, enc:jwk, val:jwk, decrypt:jwk&lt;/li&gt;
  &lt;/ul&gt;

  &lt;hr/&gt;
&lt;/body&gt;
&lt;/html&gt;]]&gt;&lt;/L7p:Content&gt;
                    &lt;L7p:ContentType stringValue="text/html; charset=UTF-8"/&gt;
                    &lt;L7p:ExtraHeaders nameValuePairArray="included"/&gt;
                &lt;/L7p:CustomizeErrorResponse&gt;
                &lt;L7p:FalseAssertion/&gt;
                &lt;L7p:assertionComment&gt;
                    &lt;L7p:Properties mapValue="included"&gt;
                        &lt;L7p:entry&gt;
                            &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                            &lt;L7p:value stringValue="// ${test} value is not set"/&gt;
                        &lt;/L7p:entry&gt;
                    &lt;/L7p:Properties&gt;
                &lt;/L7p:assertionComment&gt;
            &lt;/wsp:All&gt;
            &lt;L7p:assertionComment&gt;
                &lt;L7p:Properties mapValue="included"&gt;
                    &lt;L7p:entry&gt;
                        &lt;L7p:key stringValue="RIGHT.COMMENT"/&gt;
                        &lt;L7p:value stringValue="// Handle different test scenarios"/&gt;
                    &lt;/L7p:entry&gt;
                &lt;/L7p:Properties&gt;
            &lt;/L7p:assertionComment&gt;
        &lt;/wsp:OneOrMore&gt;
        &lt;L7p:HardcodedResponse&gt;
            &lt;L7p:Base64ResponseBody stringValue="and0OiAke3JlcXVlc3QuaHR0cC5wYXJhbWV0ZXIuand0fQoKVGVzdDogJHtyZXF1ZXN0Lmh0dHAucGFyYW1ldGVyLnRlc3R9CgpTZW5kZXIgc2lnOiAke3JlcXVlc3QuaHR0cC5wYXJhbWV0ZXIuc2lnfQpTZW5kZXIgZW5jOiAke3JlcXVlc3QuaHR0cC5wYXJhbWV0ZXIuZW5jfQoKVmFsaWRhdGlvbjogJHt2YWxpZGF0aW9ufQpEZWNyeXB0aW9uOiAke2RlY3J5cHRpb259Cgoke3Jlc3VsdH0="/&gt;
            &lt;L7p:ResponseContentType stringValue="text/plain; charset=UTF-8"/&gt;
        &lt;/L7p:HardcodedResponse&gt;
    &lt;/wsp:All&gt;
&lt;/wsp:Policy&gt;
</l7:Resource>
                        </l7:ResourceSet>
                    </l7:Resources>
                </l7:Service>
            </l7:Resource>
        </l7:Item>
    </l7:References>
    <l7:Mappings>
        <l7:Mapping action="NewOrExisting" srcId="0000000000000000ffffffffffffec76" srcUri="https://ssg100.l7tech.com:8443/restman/1.0/folders/0000000000000000ffffffffffffec76" type="FOLDER">
            <l7:Properties>
                <l7:Property key="FailOnNew">
                    <l7:BooleanValue>true</l7:BooleanValue>
                </l7:Property>
            </l7:Properties>
        </l7:Mapping>
        <l7:Mapping action="NewOrExisting" srcId="6ee2107e4cfec877a60af21e920d422b" srcUri="https://ssg100.l7tech.com:8443/restman/1.0/folders/6ee2107e4cfec877a60af21e920d422b" type="FOLDER"/>
        <l7:Mapping action="NewOrExisting" srcId="00000000000000000000000000000002:sender" srcUri="https://ssg100.l7tech.com:8443/restman/1.0/privateKeys/00000000000000000000000000000002:sender" type="SSG_KEY_ENTRY"/>
        <l7:Mapping action="NewOrExisting" srcId="00000000000000000000000000000002:SSL" srcUri="https://ssg100.l7tech.com:8443/restman/1.0/privateKeys/00000000000000000000000000000002:SSL" type="SSG_KEY_ENTRY"/>
        <l7:Mapping action="NewOrExisting" srcId="4d23c5abba6cc6e62e4672c65385d211" srcUri="https://ssg100.l7tech.com:8443/restman/1.0/services/4d23c5abba6cc6e62e4672c65385d211" type="SERVICE"/>
        <l7:Mapping action="NewOrExisting" srcId="00000000000000000000000000000002:recipient" srcUri="https://ssg100.l7tech.com:8443/restman/1.0/privateKeys/00000000000000000000000000000002:recipient" type="SSG_KEY_ENTRY"/>
        <l7:Mapping action="NewOrExisting" srcId="6ee2107e4cfec877a60af21e920d4271" srcUri="https://ssg100.l7tech.com:8443/restman/1.0/services/6ee2107e4cfec877a60af21e920d4271" type="SERVICE"/>
    </l7:Mappings>
</l7:Bundle>
